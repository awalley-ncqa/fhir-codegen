// <auto-generated />
// Built from: hl7.fhir.r4.core version: 4.0.1


namespace fhir_R4
{
  /// <summary>
  /// Specific parameters for the ordered item.  For example, the size of the indicated item.
  /// </summary>
  struct SupplyRequestParameter {
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// A code or string that identifies the device detail being asserted.
    /// </summary>
    CodeableConcept* _code;
    /// <summary>
    /// Range means device should have a value that falls somewhere within the specified range.
    /// </summary>
    CodeableConcept* _valueCodeableConcept;
    /// <summary>
    /// Range means device should have a value that falls somewhere within the specified range.
    /// </summary>
    Quantity* _valueQuantity;
    /// <summary>
    /// Range means device should have a value that falls somewhere within the specified range.
    /// </summary>
    Range* _valueRange;
    /// <summary>
    /// Range means device should have a value that falls somewhere within the specified range.
    /// </summary>
    NullableBoolean* _valueBoolean;
  };
  /// <summary>
  /// A record of a request for a medication, substance or device used in the healthcare setting.
  /// </summary>
  struct SupplyRequest {
    ResourceType resourceType;
    /// <summary>
    /// The only time that a resource does not have an id is when it is being submitted to the server using a create operation.
    /// </summary>
    string _id;
    /// <summary>
    /// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
    /// </summary>
    Meta* _meta;
    /// <summary>
    /// Asserting this rule set restricts the content to be only understood by a limited set of trading partners. This inherently limits the usefulness of the data in the long term. However, the existing health eco-system is highly fractured, and not yet ready to define, collect, and exchange data in a generally computable sense. Wherever possible, implementers and/or specification writers should avoid using this element. Often, when used, the URL is a reference to an implementation guide that defines these special rules as part of it's narrative along with other profiles, value sets, etc.
    /// </summary>
    NullableString8* _implicitRules;
    /// <summary>
    /// Language is provided to support indexing and accessibility (typically, services such as text to speech use the language tag). The html language tag in the narrative applies  to the narrative. The language tag on the resource may be used to specify the language of other presentations generated from the data in the resource. Not all the content has to be in the base language. The Resource.language should not be assumed to apply to the narrative automatically. If a language is specified, it should it also be specified on the div element in the html (see rules in HTML5 for information about the relationship between xml:lang and the html lang attribute).
    /// </summary>
    NullableString8* _language;
    /// <summary>
    /// Contained resources do not have narrative. Resources that are not contained SHOULD have a narrative. In some cases, a resource may only have text with little or no additional discrete data (as long as all minOccurs=1 elements are satisfied).  This may be necessary for data from legacy systems where information is captured as a "text blob" or where text is additionally entered raw or narrated and encoded information is added later.
    /// </summary>
    Narrative* _text;
    /// <summary>
    /// This should never be done when the content can be identified properly, as once identification is lost, it is extremely difficult (and context dependent) to restore it again. Contained resources may have profiles and tags In their meta elements, but SHALL NOT have security labels.
    /// </summary>
    size_t _contained_count;
    Resource** _contained;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// The identifier.type element is used to distinguish between the identifiers assigned by the requester/placer and the performer/filler.
    /// </summary>
    size_t _identifier_count;
    Identifier** _identifier;
    /// <summary>
    /// Status of the supply request.
    /// </summary>
    NullableString8* _status;
    /// <summary>
    /// Category of supply, e.g.  central, non-stock, etc. This is used to support work flows associated with the supply process.
    /// </summary>
    CodeableConcept* _category;
    /// <summary>
    /// Indicates how quickly this SupplyRequest should be addressed with respect to other requests.
    /// </summary>
    NullableString8* _priority;
    /// <summary>
    /// Note that there's a difference between a prescription - an instruction to take a medication, along with a (sometimes) implicit supply, and an explicit request to supply, with no explicit instructions.
    /// </summary>
    CodeableConcept* _itemCodeableConcept;
    /// <summary>
    /// Note that there's a difference between a prescription - an instruction to take a medication, along with a (sometimes) implicit supply, and an explicit request to supply, with no explicit instructions.
    /// </summary>
    Reference* _itemReference;
    /// <summary>
    /// The amount that is being ordered of the indicated item.
    /// </summary>
    Quantity* _quantity;
    /// <summary>
    /// Specific parameters for the ordered item.  For example, the size of the indicated item.
    /// </summary>
    size_t _parameter_count;
    SupplyRequestParameter** _parameter;
    /// <summary>
    /// When the request should be fulfilled.
    /// </summary>
    ISO8601_Time* _occurrenceDateTime;
    /// <summary>
    /// When the request should be fulfilled.
    /// </summary>
    Period* _occurrencePeriod;
    /// <summary>
    /// When the request should be fulfilled.
    /// </summary>
    Timing* _occurrenceTiming;
    /// <summary>
    /// When the request was made.
    /// </summary>
    ISO8601_Time* _authoredOn;
    /// <summary>
    /// The device, practitioner, etc. who initiated the request.
    /// </summary>
    Reference* _requester;
    /// <summary>
    /// Who is intended to fulfill the request.
    /// </summary>
    size_t _supplier_count;
    Reference** _supplier;
    /// <summary>
    /// The reason why the supply item was requested.
    /// </summary>
    size_t _reasonCode_count;
    CodeableConcept** _reasonCode;
    /// <summary>
    /// The reason why the supply item was requested.
    /// </summary>
    size_t _reasonReference_count;
    Reference** _reasonReference;
    /// <summary>
    /// Where the supply is expected to come from.
    /// </summary>
    Reference* _deliverFrom;
    /// <summary>
    /// Where the supply is destined to go.
    /// </summary>
    Reference* _deliverTo;
  };
};
