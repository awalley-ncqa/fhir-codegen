// <auto-generated />
// Built from: hl7.fhir.r4.core version: 4.0.1


namespace fhir_R4
{
  /// <summary>
  /// Logical network location for application activity, if the activity has a network location.
  /// </summary>
  struct AuditEventAgentNetwork {
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// This could be a device id, IP address or some other identifier associated with a device.
    /// </summary>
    string* _address;
    /// <summary>
    /// An identifier for the type of network access point that originated the audit event.
    /// </summary>
    NullableString8* _type;
  };
  /// <summary>
  /// Several agents may be associated (i.e. have some responsibility for an activity) with an event or activity.
  /// For example, an activity may be initiated by one user for other users or involve more than one user. However, only one user may be the initiator/requestor for the activity.
  /// </summary>
  struct AuditEventAgent {
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// Specification of the participation type the user plays when performing the event.
    /// </summary>
    CodeableConcept* _type;
    /// <summary>
    /// Should be roles relevant to the event. Should  not be an exhaustive list of roles.
    /// </summary>
    size_t _role_count;
    CodeableConcept** _role;
    /// <summary>
    /// Where a User ID is available it will go into who.identifier.
    /// </summary>
    Reference* _who;
    /// <summary>
    /// Alternative agent Identifier. For a human, this should be a user identifier text string from authentication system. This identifier would be one known to a common authentication system (e.g. single sign-on), if available.
    /// </summary>
    string* _altId;
    /// <summary>
    /// Human-meaningful name for the agent.
    /// </summary>
    string* _name;
    /// <summary>
    /// There can only be one initiator. If the initiator is not clear, then do not choose any one agent as the initiator.
    /// </summary>
    NullableBoolean* _requestor;
    /// <summary>
    /// Where the event occurred.
    /// </summary>
    Reference* _location;
    /// <summary>
    /// For example: Where an OAuth token authorizes, the unique identifier from the OAuth token is placed into the policy element Where a policy engine (e.g. XACML) holds policy logic, the unique policy identifier is placed into the policy element.
    /// </summary>
    size_t _policy_count;
    NullableString8** _policy;
    /// <summary>
    /// Type of media involved. Used when the event is about exporting/importing onto media.
    /// </summary>
    Coding* _media;
    /// <summary>
    /// Logical network location for application activity, if the activity has a network location.
    /// </summary>
    AuditEventAgentNetwork* _network;
    /// <summary>
    /// Use AuditEvent.agent.purposeOfUse when you know that is specific to the agent, otherwise use AuditEvent.purposeOfEvent. For example, during a machine-to-machine transfer it might not be obvious to the audit system who caused the event, but it does know why.
    /// </summary>
    size_t _purposeOfUse_count;
    CodeableConcept** _purposeOfUse;
  };
  /// <summary>
  /// Since multi-tier, distributed, or composite applications make source identification ambiguous, this collection of fields may repeat for each application or process actively involved in the event. For example, multiple value-sets can identify participating web servers, application processes, and database server threads in an n-tier distributed application. Passive event participants (e.g. low-level network transports) need not be identified.
  /// </summary>
  struct AuditEventSource {
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// Logical source location within the healthcare enterprise network.  For example, a hospital or other provider location within a multi-entity provider group.
    /// </summary>
    string* _site;
    /// <summary>
    /// Identifier of the source where the event was detected.
    /// </summary>
    Reference* _observer;
    /// <summary>
    /// Code specifying the type of source where event originated.
    /// </summary>
    size_t _type_count;
    Coding** _type;
  };
  /// <summary>
  /// Tagged value pairs for conveying additional information about the entity.
  /// </summary>
  struct AuditEventEntityDetail {
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// The type of extra detail provided in the value.
    /// </summary>
    string* _type;
    /// <summary>
    /// The value can be string when known to be a string, else base64 encoding should be used to protect binary or undefined content.  The meaning and secondary-encoding of the content of base64 encoded blob is specific to the AuditEvent.type, AuditEvent.subtype, AuditEvent.entity.type, and AuditEvent.entity.role.  The base64 is a general-use and safe container for event specific data blobs regardless of the encoding used by the transaction being recorded.  An AuditEvent consuming application must understand the event it is consuming and the formats used by the event. For example if auditing an Oracle network database access, the Oracle formats must be understood as they will be simply encoded in the base64binary blob.
    /// </summary>
    string* _valueString;
    /// <summary>
    /// The value can be string when known to be a string, else base64 encoding should be used to protect binary or undefined content.  The meaning and secondary-encoding of the content of base64 encoded blob is specific to the AuditEvent.type, AuditEvent.subtype, AuditEvent.entity.type, and AuditEvent.entity.role.  The base64 is a general-use and safe container for event specific data blobs regardless of the encoding used by the transaction being recorded.  An AuditEvent consuming application must understand the event it is consuming and the formats used by the event. For example if auditing an Oracle network database access, the Oracle formats must be understood as they will be simply encoded in the base64binary blob.
    /// </summary>
    NullableString8* _valueBase64Binary;
  };
  /// <summary>
  /// Required unless the values for event identification, agent identification, and audit source identification are sufficient to document the entire auditable event. Because events may have more than one entity, this group can be a repeating set of values.
  /// </summary>
  struct AuditEventEntity {
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// Identifies a specific instance of the entity. The reference should be version specific.
    /// </summary>
    Reference* _what;
    /// <summary>
    /// This value is distinct from the user's role or any user relationship to the entity.
    /// </summary>
    Coding* _type;
    /// <summary>
    /// Code representing the role the entity played in the event being audited.
    /// </summary>
    Coding* _role;
    /// <summary>
    /// This can be used to provide an audit trail for data, over time, as it passes through the system.
    /// </summary>
    Coding* _lifecycle;
    /// <summary>
    /// Copied from entity meta security tags.
    /// </summary>
    size_t _securityLabel_count;
    Coding** _securityLabel;
    /// <summary>
    /// This field may be used in a query/report to identify audit events for a specific person.  For example, where multiple synonymous entity identifiers (patient number, medical record number, encounter number, etc.) have been used.
    /// </summary>
    string* _name;
    /// <summary>
    /// Text that describes the entity in more detail.
    /// </summary>
    string* _description;
    /// <summary>
    /// The meaning and secondary-encoding of the content of base64 encoded blob is specific to the AuditEvent.type, AuditEvent.subtype, AuditEvent.entity.type, and AuditEvent.entity.role.  The base64 is a general-use and safe container for event specific data blobs regardless of the encoding used by the transaction being recorded.  An AuditEvent consuming application must understand the event it is consuming and the formats used by the event. For example, if auditing an Oracle network database access, the Oracle formats must be understood as they will be simply encoded in the base64binary blob.
    /// </summary>
    NullableString8* _query;
    /// <summary>
    /// Tagged value pairs for conveying additional information about the entity.
    /// </summary>
    size_t _detail_count;
    AuditEventEntityDetail** _detail;
  };
  /// <summary>
  /// A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage.
  /// </summary>
  struct AuditEvent {
    ResourceType resourceType;
    /// <summary>
    /// The only time that a resource does not have an id is when it is being submitted to the server using a create operation.
    /// </summary>
    string _id;
    /// <summary>
    /// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
    /// </summary>
    Meta* _meta;
    /// <summary>
    /// Asserting this rule set restricts the content to be only understood by a limited set of trading partners. This inherently limits the usefulness of the data in the long term. However, the existing health eco-system is highly fractured, and not yet ready to define, collect, and exchange data in a generally computable sense. Wherever possible, implementers and/or specification writers should avoid using this element. Often, when used, the URL is a reference to an implementation guide that defines these special rules as part of it's narrative along with other profiles, value sets, etc.
    /// </summary>
    NullableString8* _implicitRules;
    /// <summary>
    /// Language is provided to support indexing and accessibility (typically, services such as text to speech use the language tag). The html language tag in the narrative applies  to the narrative. The language tag on the resource may be used to specify the language of other presentations generated from the data in the resource. Not all the content has to be in the base language. The Resource.language should not be assumed to apply to the narrative automatically. If a language is specified, it should it also be specified on the div element in the html (see rules in HTML5 for information about the relationship between xml:lang and the html lang attribute).
    /// </summary>
    NullableString8* _language;
    /// <summary>
    /// Contained resources do not have narrative. Resources that are not contained SHOULD have a narrative. In some cases, a resource may only have text with little or no additional discrete data (as long as all minOccurs=1 elements are satisfied).  This may be necessary for data from legacy systems where information is captured as a "text blob" or where text is additionally entered raw or narrated and encoded information is added later.
    /// </summary>
    Narrative* _text;
    /// <summary>
    /// This should never be done when the content can be identified properly, as once identification is lost, it is extremely difficult (and context dependent) to restore it again. Contained resources may have profiles and tags In their meta elements, but SHALL NOT have security labels.
    /// </summary>
    size_t _contained_count;
    Resource** _contained;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// Identifier for a family of the event.  For example, a menu item, program, rule, policy, function code, application name or URL. It identifies the performed function.
    /// </summary>
    Coding* _type;
    /// <summary>
    /// Identifier for the category of event.
    /// </summary>
    size_t _subtype_count;
    Coding** _subtype;
    /// <summary>
    /// Indicator for type of action performed during the event that generated the audit.
    /// </summary>
    NullableString8* _action;
    /// <summary>
    /// The period can be a little arbitrary; where possible, the time should correspond to human assessment of the activity time.
    /// </summary>
    Period* _period;
    /// <summary>
    /// In a distributed system, some sort of common time base (e.g. an NTP [RFC1305] server) is a good implementation tactic.
    /// </summary>
    ISO8601_Time* _recorded;
    /// <summary>
    /// In some cases a "success" may be partial, for example, an incomplete or interrupted transfer of a radiological study. For the purpose of establishing accountability, these distinctions are not relevant.
    /// </summary>
    NullableString8* _outcome;
    /// <summary>
    /// A free text description of the outcome of the event.
    /// </summary>
    string* _outcomeDesc;
    /// <summary>
    /// Use AuditEvent.agent.purposeOfUse when you know that it is specific to the agent, otherwise use AuditEvent.purposeOfEvent. For example, during a machine-to-machine transfer it might not be obvious to the audit system who caused the event, but it does know why.
    /// </summary>
    size_t _purposeOfEvent_count;
    CodeableConcept** _purposeOfEvent;
    /// <summary>
    /// Several agents may be associated (i.e. have some responsibility for an activity) with an event or activity.
    /// For example, an activity may be initiated by one user for other users or involve more than one user. However, only one user may be the initiator/requestor for the activity.
    /// </summary>
    size_t _agent_count;
    AuditEventAgent** _agent;
    /// <summary>
    /// Since multi-tier, distributed, or composite applications make source identification ambiguous, this collection of fields may repeat for each application or process actively involved in the event. For example, multiple value-sets can identify participating web servers, application processes, and database server threads in an n-tier distributed application. Passive event participants (e.g. low-level network transports) need not be identified.
    /// </summary>
    AuditEventSource* _source;
    /// <summary>
    /// Required unless the values for event identification, agent identification, and audit source identification are sufficient to document the entire auditable event. Because events may have more than one entity, this group can be a repeating set of values.
    /// </summary>
    size_t _entity_count;
    AuditEventEntity** _entity;
  };
};
