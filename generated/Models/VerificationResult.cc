// <auto-generated />
// Built from: hl7.fhir.r4.core version: 4.0.1


namespace fhir_R4
{
  /// <summary>
  /// Information about the primary source(s) involved in validation.
  /// </summary>
  struct VerificationResultPrimarySource {
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// Reference to the primary source.
    /// </summary>
    Reference* _who;
    /// <summary>
    /// Type of primary source (License Board; Primary Education; Continuing Education; Postal Service; Relationship owner; Registration Authority; legal source; issuing source; authoritative source).
    /// </summary>
    size_t _type_count;
    CodeableConcept** _type;
    /// <summary>
    /// Method for communicating with the primary source (manual; API; Push).
    /// </summary>
    size_t _communicationMethod_count;
    CodeableConcept** _communicationMethod;
    /// <summary>
    /// Status of the validation of the target against the primary source (successful; failed; unknown).
    /// </summary>
    CodeableConcept* _validationStatus;
    /// <summary>
    /// When the target was validated against the primary source.
    /// </summary>
    ISO8601_Time* _validationDate;
    /// <summary>
    /// Ability of the primary source to push updates/alerts (yes; no; undetermined).
    /// </summary>
    CodeableConcept* _canPushUpdates;
    /// <summary>
    /// Type of alerts/updates the primary source can send (specific requested changes; any changes; as defined by source).
    /// </summary>
    size_t _pushTypeAvailable_count;
    CodeableConcept** _pushTypeAvailable;
  };
  /// <summary>
  /// Information about the entity attesting to information.
  /// </summary>
  struct VerificationResultAttestation {
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// The individual or organization attesting to information.
    /// </summary>
    Reference* _who;
    /// <summary>
    /// When the who is asserting on behalf of another (organization or individual).
    /// </summary>
    Reference* _onBehalfOf;
    /// <summary>
    /// The method by which attested information was submitted/retrieved (manual; API; Push).
    /// </summary>
    CodeableConcept* _communicationMethod;
    /// <summary>
    /// The date the information was attested to.
    /// </summary>
    ISO8601_Time* _date;
    /// <summary>
    /// A digital identity certificate associated with the attestation source.
    /// </summary>
    string* _sourceIdentityCertificate;
    /// <summary>
    /// A digital identity certificate associated with the proxy entity submitting attested information on behalf of the attestation source.
    /// </summary>
    string* _proxyIdentityCertificate;
    /// <summary>
    /// Signed assertion by the proxy entity indicating that they have the right to submit attested information on behalf of the attestation source.
    /// </summary>
    Signature* _proxySignature;
    /// <summary>
    /// Signed assertion by the attestation source that they have attested to the information.
    /// </summary>
    Signature* _sourceSignature;
  };
  /// <summary>
  /// Information about the entity validating information.
  /// </summary>
  struct VerificationResultValidator {
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// Reference to the organization validating information.
    /// </summary>
    Reference* _organization;
    /// <summary>
    /// A digital identity certificate associated with the validator.
    /// </summary>
    string* _identityCertificate;
    /// <summary>
    /// Signed assertion by the validator that they have validated the information.
    /// </summary>
    Signature* _attestationSignature;
  };
  /// <summary>
  /// Describes validation requirements, source(s), status and dates for one or more elements.
  /// </summary>
  struct VerificationResult {
    ResourceType resourceType;
    /// <summary>
    /// The only time that a resource does not have an id is when it is being submitted to the server using a create operation.
    /// </summary>
    string _id;
    /// <summary>
    /// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
    /// </summary>
    Meta* _meta;
    /// <summary>
    /// Asserting this rule set restricts the content to be only understood by a limited set of trading partners. This inherently limits the usefulness of the data in the long term. However, the existing health eco-system is highly fractured, and not yet ready to define, collect, and exchange data in a generally computable sense. Wherever possible, implementers and/or specification writers should avoid using this element. Often, when used, the URL is a reference to an implementation guide that defines these special rules as part of it's narrative along with other profiles, value sets, etc.
    /// </summary>
    NullableString8* _implicitRules;
    /// <summary>
    /// Language is provided to support indexing and accessibility (typically, services such as text to speech use the language tag). The html language tag in the narrative applies  to the narrative. The language tag on the resource may be used to specify the language of other presentations generated from the data in the resource. Not all the content has to be in the base language. The Resource.language should not be assumed to apply to the narrative automatically. If a language is specified, it should it also be specified on the div element in the html (see rules in HTML5 for information about the relationship between xml:lang and the html lang attribute).
    /// </summary>
    NullableString8* _language;
    /// <summary>
    /// Contained resources do not have narrative. Resources that are not contained SHOULD have a narrative. In some cases, a resource may only have text with little or no additional discrete data (as long as all minOccurs=1 elements are satisfied).  This may be necessary for data from legacy systems where information is captured as a "text blob" or where text is additionally entered raw or narrated and encoded information is added later.
    /// </summary>
    Narrative* _text;
    /// <summary>
    /// This should never be done when the content can be identified properly, as once identification is lost, it is extremely difficult (and context dependent) to restore it again. Contained resources may have profiles and tags In their meta elements, but SHALL NOT have security labels.
    /// </summary>
    size_t _contained_count;
    Resource** _contained;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// A resource that was validated.
    /// </summary>
    size_t _target_count;
    Reference** _target;
    /// <summary>
    /// The fhirpath location(s) within the resource that was validated.
    /// </summary>
    size_t _targetLocation_count;
    string** _targetLocation;
    /// <summary>
    /// The frequency with which the target must be validated (none; initial; periodic).
    /// </summary>
    CodeableConcept* _need;
    /// <summary>
    /// The validation status of the target (attested; validated; in process; requires revalidation; validation failed; revalidation failed).
    /// </summary>
    NullableString8* _status;
    /// <summary>
    /// When the validation status was updated.
    /// </summary>
    ISO8601_Time* _statusDate;
    /// <summary>
    /// What the target is validated against (nothing; primary source; multiple sources).
    /// </summary>
    CodeableConcept* _validationType;
    /// <summary>
    /// The primary process by which the target is validated (edit check; value set; primary source; multiple sources; standalone; in context).
    /// </summary>
    size_t _validationProcess_count;
    CodeableConcept** _validationProcess;
    /// <summary>
    /// Frequency of revalidation.
    /// </summary>
    Timing* _frequency;
    /// <summary>
    /// The date/time validation was last completed (including failed validations).
    /// </summary>
    ISO8601_Time* _lastPerformed;
    /// <summary>
    /// The date when target is next validated, if appropriate.
    /// </summary>
    ISO8601_Time* _nextScheduled;
    /// <summary>
    /// The result if validation fails (fatal; warning; record only; none).
    /// </summary>
    CodeableConcept* _failureAction;
    /// <summary>
    /// Information about the primary source(s) involved in validation.
    /// </summary>
    size_t _primarySource_count;
    VerificationResultPrimarySource** _primarySource;
    /// <summary>
    /// Information about the entity attesting to information.
    /// </summary>
    VerificationResultAttestation* _attestation;
    /// <summary>
    /// Information about the entity validating information.
    /// </summary>
    size_t _validator_count;
    VerificationResultValidator** _validator;
  };
};
