// <auto-generated />
// Built from: hl7.fhir.r4.core version: 4.0.1


namespace fhir_R4
{
  /// <summary>
  /// Moiety, for structural modifications.
  /// </summary>
  struct SubstanceSpecificationMoiety {
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// Role that the moiety is playing.
    /// </summary>
    CodeableConcept* _role;
    /// <summary>
    /// Identifier by which this moiety substance is known.
    /// </summary>
    Identifier* _identifier;
    /// <summary>
    /// Textual name for this moiety substance.
    /// </summary>
    string* _name;
    /// <summary>
    /// Stereochemistry type.
    /// </summary>
    CodeableConcept* _stereochemistry;
    /// <summary>
    /// Optical activity type.
    /// </summary>
    CodeableConcept* _opticalActivity;
    /// <summary>
    /// Molecular formula.
    /// </summary>
    string* _molecularFormula;
    /// <summary>
    /// Quantitative value for this moiety.
    /// </summary>
    Quantity* _amountQuantity;
    /// <summary>
    /// Quantitative value for this moiety.
    /// </summary>
    string* _amountString;
  };
  /// <summary>
  /// General specifications for this substance, including how it is related to other substances.
  /// </summary>
  struct SubstanceSpecificationProperty {
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// A category for this property, e.g. Physical, Chemical, Enzymatic.
    /// </summary>
    CodeableConcept* _category;
    /// <summary>
    /// Property type e.g. viscosity, pH, isoelectric point.
    /// </summary>
    CodeableConcept* _code;
    /// <summary>
    /// Parameters that were used in the measurement of a property (e.g. for viscosity: measured at 20C with a pH of 7.1).
    /// </summary>
    string* _parameters;
    /// <summary>
    /// A substance upon which a defining property depends (e.g. for solubility: in water, in alcohol).
    /// </summary>
    Reference* _definingSubstanceReference;
    /// <summary>
    /// A substance upon which a defining property depends (e.g. for solubility: in water, in alcohol).
    /// </summary>
    CodeableConcept* _definingSubstanceCodeableConcept;
    /// <summary>
    /// Quantitative value for this property.
    /// </summary>
    Quantity* _amountQuantity;
    /// <summary>
    /// Quantitative value for this property.
    /// </summary>
    string* _amountString;
  };
  /// <summary>
  /// The molecular weight or weight range (for proteins, polymers or nucleic acids).
  /// </summary>
  struct SubstanceSpecificationStructureIsotopeMolecularWeight {
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// The method by which the molecular weight was determined.
    /// </summary>
    CodeableConcept* _method;
    /// <summary>
    /// Type of molecular weight such as exact, average (also known as. number average), weight average.
    /// </summary>
    CodeableConcept* _type;
    /// <summary>
    /// Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.
    /// </summary>
    Quantity* _amount;
  };
  /// <summary>
  /// Applicable for single substances that contain a radionuclide or a non-natural isotopic ratio.
  /// </summary>
  struct SubstanceSpecificationStructureIsotope {
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// Substance identifier for each non-natural or radioisotope.
    /// </summary>
    Identifier* _identifier;
    /// <summary>
    /// Substance name for each non-natural or radioisotope.
    /// </summary>
    CodeableConcept* _name;
    /// <summary>
    /// The type of isotopic substitution present in a single substance.
    /// </summary>
    CodeableConcept* _substitution;
    /// <summary>
    /// Half life - for a non-natural nuclide.
    /// </summary>
    Quantity* _halfLife;
    /// <summary>
    /// The molecular weight or weight range (for proteins, polymers or nucleic acids).
    /// </summary>
    SubstanceSpecificationStructureIsotopeMolecularWeight* _molecularWeight;
  };
  /// <summary>
  /// Molecular structural representation.
  /// </summary>
  struct SubstanceSpecificationStructureRepresentation {
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// The type of structure (e.g. Full, Partial, Representative).
    /// </summary>
    CodeableConcept* _type;
    /// <summary>
    /// The structural representation as text string in a format e.g. InChI, SMILES, MOLFILE, CDX.
    /// </summary>
    string* _representationField;
    /// <summary>
    /// An attached file with the structural representation.
    /// </summary>
    Attachment* _attachment;
  };
  /// <summary>
  /// Structural information.
  /// </summary>
  struct SubstanceSpecificationStructure {
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// Stereochemistry type.
    /// </summary>
    CodeableConcept* _stereochemistry;
    /// <summary>
    /// Optical activity type.
    /// </summary>
    CodeableConcept* _opticalActivity;
    /// <summary>
    /// Molecular formula.
    /// </summary>
    string* _molecularFormula;
    /// <summary>
    /// Specified per moiety according to the Hill system, i.e. first C, then H, then alphabetical, each moiety separated by a dot.
    /// </summary>
    string* _molecularFormulaByMoiety;
    /// <summary>
    /// Applicable for single substances that contain a radionuclide or a non-natural isotopic ratio.
    /// </summary>
    size_t _isotope_count;
    SubstanceSpecificationStructureIsotope** _isotope;
    /// <summary>
    /// The molecular weight or weight range (for proteins, polymers or nucleic acids).
    /// </summary>
    SubstanceSpecificationStructureIsotopeMolecularWeight* _molecularWeight;
    /// <summary>
    /// Supporting literature.
    /// </summary>
    size_t _source_count;
    Reference** _source;
    /// <summary>
    /// Molecular structural representation.
    /// </summary>
    size_t _representation_count;
    SubstanceSpecificationStructureRepresentation** _representation;
  };
  /// <summary>
  /// Codes associated with the substance.
  /// </summary>
  struct SubstanceSpecificationCode {
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// The specific code.
    /// </summary>
    CodeableConcept* _codeField;
    /// <summary>
    /// Status of the code assignment.
    /// </summary>
    CodeableConcept* _status;
    /// <summary>
    /// The date at which the code status is changed as part of the terminology maintenance.
    /// </summary>
    ISO8601_Time* _statusDate;
    /// <summary>
    /// Any comment can be provided in this field, if necessary.
    /// </summary>
    string* _comment;
    /// <summary>
    /// Supporting literature.
    /// </summary>
    size_t _source_count;
    Reference** _source;
  };
  /// <summary>
  /// Details of the official nature of this name.
  /// </summary>
  struct SubstanceSpecificationNameOfficial {
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// Which authority uses this official name.
    /// </summary>
    CodeableConcept* _authority;
    /// <summary>
    /// The status of the official name.
    /// </summary>
    CodeableConcept* _status;
    /// <summary>
    /// Date of official name change.
    /// </summary>
    ISO8601_Time* _date;
  };
  /// <summary>
  /// Names applicable to this substance.
  /// </summary>
  struct SubstanceSpecificationName {
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// The actual name.
    /// </summary>
    string* _nameField;
    /// <summary>
    /// Name type.
    /// </summary>
    CodeableConcept* _type;
    /// <summary>
    /// The status of the name.
    /// </summary>
    CodeableConcept* _status;
    /// <summary>
    /// If this is the preferred name for this substance.
    /// </summary>
    NullableBoolean* _preferred;
    /// <summary>
    /// Language of the name.
    /// </summary>
    size_t _language_count;
    CodeableConcept** _language;
    /// <summary>
    /// The use context of this name for example if there is a different name a drug active ingredient as opposed to a food colour additive.
    /// </summary>
    size_t _domain_count;
    CodeableConcept** _domain;
    /// <summary>
    /// The jurisdiction where this name applies.
    /// </summary>
    size_t _jurisdiction_count;
    CodeableConcept** _jurisdiction;
    /// <summary>
    /// A synonym of this name.
    /// </summary>
    size_t _synonym_count;
    SubstanceSpecificationName** _synonym;
    /// <summary>
    /// A translation for this name.
    /// </summary>
    size_t _translation_count;
    SubstanceSpecificationName** _translation;
    /// <summary>
    /// Details of the official nature of this name.
    /// </summary>
    size_t _official_count;
    SubstanceSpecificationNameOfficial** _official;
    /// <summary>
    /// Supporting literature.
    /// </summary>
    size_t _source_count;
    Reference** _source;
  };
  /// <summary>
  /// A link between this substance and another, with details of the relationship.
  /// </summary>
  struct SubstanceSpecificationRelationship {
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// A pointer to another substance, as a resource or just a representational code.
    /// </summary>
    Reference* _substanceReference;
    /// <summary>
    /// A pointer to another substance, as a resource or just a representational code.
    /// </summary>
    CodeableConcept* _substanceCodeableConcept;
    /// <summary>
    /// For example "salt to parent", "active moiety", "starting material".
    /// </summary>
    CodeableConcept* _relationshipField;
    /// <summary>
    /// For example where an enzyme strongly bonds with a particular substance, this is a defining relationship for that enzyme, out of several possible substance relationships.
    /// </summary>
    NullableBoolean* _isDefining;
    /// <summary>
    /// A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
    /// </summary>
    Quantity* _amountQuantity;
    /// <summary>
    /// A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
    /// </summary>
    Range* _amountRange;
    /// <summary>
    /// A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
    /// </summary>
    Ratio* _amountRatio;
    /// <summary>
    /// A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
    /// </summary>
    string* _amountString;
    /// <summary>
    /// For use when the numeric.
    /// </summary>
    Ratio* _amountRatioLowLimit;
    /// <summary>
    /// An operator for the amount, for example "average", "approximately", "less than".
    /// </summary>
    CodeableConcept* _amountType;
    /// <summary>
    /// Supporting literature.
    /// </summary>
    size_t _source_count;
    Reference** _source;
  };
  /// <summary>
  /// The detailed description of a substance, typically at a level beyond what is used for prescribing.
  /// </summary>
  struct SubstanceSpecification {
    ResourceType resourceType;
    /// <summary>
    /// The only time that a resource does not have an id is when it is being submitted to the server using a create operation.
    /// </summary>
    string _id;
    /// <summary>
    /// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
    /// </summary>
    Meta* _meta;
    /// <summary>
    /// Asserting this rule set restricts the content to be only understood by a limited set of trading partners. This inherently limits the usefulness of the data in the long term. However, the existing health eco-system is highly fractured, and not yet ready to define, collect, and exchange data in a generally computable sense. Wherever possible, implementers and/or specification writers should avoid using this element. Often, when used, the URL is a reference to an implementation guide that defines these special rules as part of it's narrative along with other profiles, value sets, etc.
    /// </summary>
    NullableString8* _implicitRules;
    /// <summary>
    /// Language is provided to support indexing and accessibility (typically, services such as text to speech use the language tag). The html language tag in the narrative applies  to the narrative. The language tag on the resource may be used to specify the language of other presentations generated from the data in the resource. Not all the content has to be in the base language. The Resource.language should not be assumed to apply to the narrative automatically. If a language is specified, it should it also be specified on the div element in the html (see rules in HTML5 for information about the relationship between xml:lang and the html lang attribute).
    /// </summary>
    NullableString8* _language;
    /// <summary>
    /// Contained resources do not have narrative. Resources that are not contained SHOULD have a narrative. In some cases, a resource may only have text with little or no additional discrete data (as long as all minOccurs=1 elements are satisfied).  This may be necessary for data from legacy systems where information is captured as a "text blob" or where text is additionally entered raw or narrated and encoded information is added later.
    /// </summary>
    Narrative* _text;
    /// <summary>
    /// This should never be done when the content can be identified properly, as once identification is lost, it is extremely difficult (and context dependent) to restore it again. Contained resources may have profiles and tags In their meta elements, but SHALL NOT have security labels.
    /// </summary>
    size_t _contained_count;
    Resource** _contained;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// Identifier by which this substance is known.
    /// </summary>
    Identifier* _identifier;
    /// <summary>
    /// High level categorization, e.g. polymer or nucleic acid.
    /// </summary>
    CodeableConcept* _type;
    /// <summary>
    /// Status of substance within the catalogue e.g. approved.
    /// </summary>
    CodeableConcept* _status;
    /// <summary>
    /// If the substance applies to only human or veterinary use.
    /// </summary>
    CodeableConcept* _domain;
    /// <summary>
    /// Textual description of the substance.
    /// </summary>
    string* _description;
    /// <summary>
    /// Supporting literature.
    /// </summary>
    size_t _source_count;
    Reference** _source;
    /// <summary>
    /// Textual comment about this record of a substance.
    /// </summary>
    string* _comment;
    /// <summary>
    /// Moiety, for structural modifications.
    /// </summary>
    size_t _moiety_count;
    SubstanceSpecificationMoiety** _moiety;
    /// <summary>
    /// General specifications for this substance, including how it is related to other substances.
    /// </summary>
    size_t _property_count;
    SubstanceSpecificationProperty** _property;
    /// <summary>
    /// General information detailing this substance.
    /// </summary>
    Reference* _referenceInformation;
    /// <summary>
    /// Structural information.
    /// </summary>
    SubstanceSpecificationStructure* _structure;
    /// <summary>
    /// Codes associated with the substance.
    /// </summary>
    size_t _code_count;
    SubstanceSpecificationCode** _code;
    /// <summary>
    /// Names applicable to this substance.
    /// </summary>
    size_t _name_count;
    SubstanceSpecificationName** _name;
    /// <summary>
    /// The molecular weight or weight range (for proteins, polymers or nucleic acids).
    /// </summary>
    size_t _molecularWeight_count;
    SubstanceSpecificationStructureIsotopeMolecularWeight** _molecularWeight;
    /// <summary>
    /// A link between this substance and another, with details of the relationship.
    /// </summary>
    size_t _relationship_count;
    SubstanceSpecificationRelationship** _relationship;
    /// <summary>
    /// Data items specific to nucleic acids.
    /// </summary>
    Reference* _nucleicAcid;
    /// <summary>
    /// Data items specific to polymers.
    /// </summary>
    Reference* _polymer;
    /// <summary>
    /// Data items specific to proteins.
    /// </summary>
    Reference* _protein;
    /// <summary>
    /// Material or taxonomic/anatomical source for the substance.
    /// </summary>
    Reference* _sourceMaterial;
  };
};
