// <auto-generated />
// Built from: hl7.fhir.r4.core version: 4.0.1


namespace fhir_R4
{
  /// <summary>
  /// A parameter passed to or received from the operation.
  /// </summary>
  struct ParametersParameter {
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// The name of the parameter (reference to the operation definition).
    /// </summary>
    string* _name;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    NullableString8* _valueBase64Binary;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    NullableBoolean* _valueBoolean;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    NullableString8* _valueCanonical;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    NullableString8* _valueCode;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    ISO8601_Time* _valueDate;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    ISO8601_Time* _valueDateTime;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    NullableString8* _valueDecimal;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    NullableString8* _valueId;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    ISO8601_Time* _valueInstant;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    NullableInt32* _valueInteger;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    NullableString8* _valueMarkdown;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    NullableString8* _valueOid;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    NullableInt32* _valuePositiveInt;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    string* _valueString;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    ISO8601_Time* _valueTime;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    NullableInt32* _valueUnsignedInt;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    NullableString8* _valueUri;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    NullableString8* _valueUrl;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    NullableString8* _valueUuid;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    Address* _valueAddress;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    Age* _valueAge;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    Annotation* _valueAnnotation;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    Attachment* _valueAttachment;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    CodeableConcept* _valueCodeableConcept;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    Coding* _valueCoding;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    ContactPoint* _valueContactPoint;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    Count* _valueCount;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    Distance* _valueDistance;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    Duration* _valueDuration;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    HumanName* _valueHumanName;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    Identifier* _valueIdentifier;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    Money* _valueMoney;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    Period* _valuePeriod;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    Quantity* _valueQuantity;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    Range* _valueRange;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    Ratio* _valueRatio;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    Reference* _valueReference;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    SampledData* _valueSampledData;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    Signature* _valueSignature;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    Timing* _valueTiming;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    ContactDetail* _valueContactDetail;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    Contributor* _valueContributor;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    DataRequirement* _valueDataRequirement;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    Expression* _valueExpression;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    ParameterDefinition* _valueParameterDefinition;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    RelatedArtifact* _valueRelatedArtifact;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    TriggerDefinition* _valueTriggerDefinition;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    UsageContext* _valueUsageContext;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    Dosage* _valueDosage;
    /// <summary>
    /// If the parameter is a data type.
    /// </summary>
    Meta* _valueMeta;
    /// <summary>
    /// When resolving references in resources, the operation definition may specify how references may be resolved between parameters. If a reference cannot be resolved between the parameters, the application should fall back to it's general resource resolution methods.
    /// </summary>
    Resource* _resource;
    /// <summary>
    /// Only one level of nested parameters is allowed.
    /// </summary>
    size_t _part_count;
    ParametersParameter** _part;
  };
  /// <summary>
  /// This resource is a non-persisted resource used to pass information into and back from an [operation](operations.html). It has no other use, and there is no RESTful endpoint associated with it.
  /// </summary>
  struct Parameters {
    ResourceType resourceType;
    /// <summary>
    /// The only time that a resource does not have an id is when it is being submitted to the server using a create operation.
    /// </summary>
    string _id;
    /// <summary>
    /// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
    /// </summary>
    Meta* _meta;
    /// <summary>
    /// Asserting this rule set restricts the content to be only understood by a limited set of trading partners. This inherently limits the usefulness of the data in the long term. However, the existing health eco-system is highly fractured, and not yet ready to define, collect, and exchange data in a generally computable sense. Wherever possible, implementers and/or specification writers should avoid using this element. Often, when used, the URL is a reference to an implementation guide that defines these special rules as part of it's narrative along with other profiles, value sets, etc.
    /// </summary>
    NullableString8* _implicitRules;
    /// <summary>
    /// Language is provided to support indexing and accessibility (typically, services such as text to speech use the language tag). The html language tag in the narrative applies  to the narrative. The language tag on the resource may be used to specify the language of other presentations generated from the data in the resource. Not all the content has to be in the base language. The Resource.language should not be assumed to apply to the narrative automatically. If a language is specified, it should it also be specified on the div element in the html (see rules in HTML5 for information about the relationship between xml:lang and the html lang attribute).
    /// </summary>
    NullableString8* _language;
    /// <summary>
    /// A parameter passed to or received from the operation.
    /// </summary>
    size_t _parameter_count;
    ParametersParameter** _parameter;
  };
};
