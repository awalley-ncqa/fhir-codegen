// <auto-generated />
// Built from: hl7.fhir.r4.core version: 4.0.1


namespace fhir_R4
{
  /// <summary>
  /// Indicates who or what performed the event.
  /// </summary>
  struct MedicationDispensePerformer {
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// Distinguishes the type of performer in the dispense.  For example, date enterer, packager, final checker.
    /// </summary>
    CodeableConcept* _function;
    /// <summary>
    /// The device, practitioner, etc. who performed the action.  It should be assumed that the actor is the dispenser of the medication.
    /// </summary>
    Reference* _actor;
  };
  /// <summary>
  /// Indicates whether or not substitution was made as part of the dispense.  In some cases, substitution will be expected but does not happen, in other cases substitution is not expected but does happen.  This block explains what substitution did or did not happen and why.  If nothing is specified, substitution was not done.
  /// </summary>
  struct MedicationDispenseSubstitution {
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// True if the dispenser dispensed a different drug or product from what was prescribed.
    /// </summary>
    NullableBoolean* _wasSubstituted;
    /// <summary>
    /// A code signifying whether a different drug was dispensed from what was prescribed.
    /// </summary>
    CodeableConcept* _type;
    /// <summary>
    /// Indicates the reason for the substitution (or lack of substitution) from what was prescribed.
    /// </summary>
    size_t _reason_count;
    CodeableConcept** _reason;
    /// <summary>
    /// The person or organization that has primary responsibility for the substitution.
    /// </summary>
    size_t _responsibleParty_count;
    Reference** _responsibleParty;
  };
  /// <summary>
  /// Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order.
  /// </summary>
  struct MedicationDispense {
    ResourceType resourceType;
    /// <summary>
    /// The only time that a resource does not have an id is when it is being submitted to the server using a create operation.
    /// </summary>
    string _id;
    /// <summary>
    /// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
    /// </summary>
    Meta* _meta;
    /// <summary>
    /// Asserting this rule set restricts the content to be only understood by a limited set of trading partners. This inherently limits the usefulness of the data in the long term. However, the existing health eco-system is highly fractured, and not yet ready to define, collect, and exchange data in a generally computable sense. Wherever possible, implementers and/or specification writers should avoid using this element. Often, when used, the URL is a reference to an implementation guide that defines these special rules as part of it's narrative along with other profiles, value sets, etc.
    /// </summary>
    NullableString8* _implicitRules;
    /// <summary>
    /// Language is provided to support indexing and accessibility (typically, services such as text to speech use the language tag). The html language tag in the narrative applies  to the narrative. The language tag on the resource may be used to specify the language of other presentations generated from the data in the resource. Not all the content has to be in the base language. The Resource.language should not be assumed to apply to the narrative automatically. If a language is specified, it should it also be specified on the div element in the html (see rules in HTML5 for information about the relationship between xml:lang and the html lang attribute).
    /// </summary>
    NullableString8* _language;
    /// <summary>
    /// Contained resources do not have narrative. Resources that are not contained SHOULD have a narrative. In some cases, a resource may only have text with little or no additional discrete data (as long as all minOccurs=1 elements are satisfied).  This may be necessary for data from legacy systems where information is captured as a "text blob" or where text is additionally entered raw or narrated and encoded information is added later.
    /// </summary>
    Narrative* _text;
    /// <summary>
    /// This should never be done when the content can be identified properly, as once identification is lost, it is extremely difficult (and context dependent) to restore it again. Contained resources may have profiles and tags In their meta elements, but SHALL NOT have security labels.
    /// </summary>
    size_t _contained_count;
    Resource** _contained;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// This is a business identifier, not a resource identifier.
    /// </summary>
    size_t _identifier_count;
    Identifier** _identifier;
    /// <summary>
    /// The procedure that trigger the dispense.
    /// </summary>
    size_t _partOf_count;
    Reference** _partOf;
    /// <summary>
    /// This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
    /// </summary>
    NullableString8* _status;
    /// <summary>
    /// Indicates the reason why a dispense was not performed.
    /// </summary>
    CodeableConcept* _statusReasonCodeableConcept;
    /// <summary>
    /// Indicates the reason why a dispense was not performed.
    /// </summary>
    Reference* _statusReasonReference;
    /// <summary>
    /// The category can be used to include where the medication is expected to be consumed or other types of dispenses.  Invariants can be used to bind to different value sets when profiling to bind.
    /// </summary>
    CodeableConcept* _category;
    /// <summary>
    /// If only a code is specified, then it needs to be a code for a specific product. If more information is required, then the use of the medication resource is recommended.  For example, if you require form or lot number, then you must reference the Medication resource.
    /// </summary>
    CodeableConcept* _medicationCodeableConcept;
    /// <summary>
    /// If only a code is specified, then it needs to be a code for a specific product. If more information is required, then the use of the medication resource is recommended.  For example, if you require form or lot number, then you must reference the Medication resource.
    /// </summary>
    Reference* _medicationReference;
    /// <summary>
    /// SubstanceAdministration-&gt;subject-&gt;Patient.
    /// </summary>
    Reference* _subject;
    /// <summary>
    /// The encounter or episode of care that establishes the context for this event.
    /// </summary>
    Reference* _context;
    /// <summary>
    /// Additional information that supports the medication being dispensed.
    /// </summary>
    size_t _supportingInformation_count;
    Reference** _supportingInformation;
    /// <summary>
    /// Indicates who or what performed the event.
    /// </summary>
    size_t _performer_count;
    MedicationDispensePerformer** _performer;
    /// <summary>
    /// The principal physical location where the dispense was performed.
    /// </summary>
    Reference* _location;
    /// <summary>
    /// Maps to basedOn in Event logical model.
    /// </summary>
    size_t _authorizingPrescription_count;
    Reference** _authorizingPrescription;
    /// <summary>
    /// Indicates the type of dispensing event that is performed. For example, Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.
    /// </summary>
    CodeableConcept* _type;
    /// <summary>
    /// The amount of medication that has been dispensed. Includes unit of measure.
    /// </summary>
    Quantity* _quantity;
    /// <summary>
    /// The amount of medication expressed as a timing amount.
    /// </summary>
    Quantity* _daysSupply;
    /// <summary>
    /// The time when the dispensed product was packaged and reviewed.
    /// </summary>
    ISO8601_Time* _whenPrepared;
    /// <summary>
    /// The time the dispensed product was provided to the patient or their representative.
    /// </summary>
    ISO8601_Time* _whenHandedOver;
    /// <summary>
    /// Identification of the facility/location where the medication was shipped to, as part of the dispense event.
    /// </summary>
    Reference* _destination;
    /// <summary>
    /// Identifies the person who picked up the medication.  This will usually be a patient or their caregiver, but some cases exist where it can be a healthcare professional.
    /// </summary>
    size_t _receiver_count;
    Reference** _receiver;
    /// <summary>
    /// Extra information about the dispense that could not be conveyed in the other attributes.
    /// </summary>
    size_t _note_count;
    Annotation** _note;
    /// <summary>
    /// When the dose or rate is intended to change over the entire administration period (e.g. Tapering dose prescriptions), multiple instances of dosage instructions will need to be supplied to convey the different doses/rates.
    /// The pharmacist reviews the medication order prior to dispense and updates the dosageInstruction based on the actual product being dispensed.
    /// </summary>
    size_t _dosageInstruction_count;
    Dosage** _dosageInstruction;
    /// <summary>
    /// Indicates whether or not substitution was made as part of the dispense.  In some cases, substitution will be expected but does not happen, in other cases substitution is not expected but does happen.  This block explains what substitution did or did not happen and why.  If nothing is specified, substitution was not done.
    /// </summary>
    MedicationDispenseSubstitution* _substitution;
    /// <summary>
    /// This element can include a detected issue that has been identified either by a decision support system or by a clinician and may include information on the steps that were taken to address the issue.
    /// </summary>
    size_t _detectedIssue_count;
    Reference** _detectedIssue;
    /// <summary>
    /// This might not include provenances for all versions of the request – only those deemed “relevant” or important. This SHALL NOT include the Provenance associated with this current version of the resource. (If that provenance is deemed to be a “relevant” change, it will need to be added as part of a later update. Until then, it can be queried directly as the Provenance that points to this version using _revinclude All Provenances should have some historical version of this Request as their subject.).
    /// </summary>
    size_t _eventHistory_count;
    Reference** _eventHistory;
  };
};
