// <auto-generated />
// Built from: hl7.fhir.r4.core version: 4.0.1


namespace fhir_R4
{
  /// <summary>
  /// The significant Conditions (or condition) that the family member had. This is a repeating section to allow a system to represent more than one condition per resource, though there is nothing stopping multiple resources - one per condition.
  /// </summary>
  struct FamilyMemberHistoryCondition {
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// The actual condition specified. Could be a coded condition (like MI or Diabetes) or a less specific string like 'cancer' depending on how much is known about the condition and the capabilities of the creating system.
    /// </summary>
    CodeableConcept* _code;
    /// <summary>
    /// Indicates what happened following the condition.  If the condition resulted in death, deceased date is captured on the relation.
    /// </summary>
    CodeableConcept* _outcome;
    /// <summary>
    /// This condition contributed to the cause of death of the related person. If contributedToDeath is not populated, then it is unknown.
    /// </summary>
    NullableBoolean* _contributedToDeath;
    /// <summary>
    /// Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
    /// </summary>
    Age* _onsetAge;
    /// <summary>
    /// Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
    /// </summary>
    Range* _onsetRange;
    /// <summary>
    /// Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
    /// </summary>
    Period* _onsetPeriod;
    /// <summary>
    /// Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
    /// </summary>
    string* _onsetString;
    /// <summary>
    /// An area where general notes can be placed about this specific condition.
    /// </summary>
    size_t _note_count;
    Annotation** _note;
  };
  /// <summary>
  /// Significant health conditions for a person related to the patient relevant in the context of care for the patient.
  /// </summary>
  struct FamilyMemberHistory {
    ResourceType resourceType;
    /// <summary>
    /// The only time that a resource does not have an id is when it is being submitted to the server using a create operation.
    /// </summary>
    string _id;
    /// <summary>
    /// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
    /// </summary>
    Meta* _meta;
    /// <summary>
    /// Asserting this rule set restricts the content to be only understood by a limited set of trading partners. This inherently limits the usefulness of the data in the long term. However, the existing health eco-system is highly fractured, and not yet ready to define, collect, and exchange data in a generally computable sense. Wherever possible, implementers and/or specification writers should avoid using this element. Often, when used, the URL is a reference to an implementation guide that defines these special rules as part of it's narrative along with other profiles, value sets, etc.
    /// </summary>
    NullableString8* _implicitRules;
    /// <summary>
    /// Language is provided to support indexing and accessibility (typically, services such as text to speech use the language tag). The html language tag in the narrative applies  to the narrative. The language tag on the resource may be used to specify the language of other presentations generated from the data in the resource. Not all the content has to be in the base language. The Resource.language should not be assumed to apply to the narrative automatically. If a language is specified, it should it also be specified on the div element in the html (see rules in HTML5 for information about the relationship between xml:lang and the html lang attribute).
    /// </summary>
    NullableString8* _language;
    /// <summary>
    /// Contained resources do not have narrative. Resources that are not contained SHOULD have a narrative. In some cases, a resource may only have text with little or no additional discrete data (as long as all minOccurs=1 elements are satisfied).  This may be necessary for data from legacy systems where information is captured as a "text blob" or where text is additionally entered raw or narrated and encoded information is added later.
    /// </summary>
    Narrative* _text;
    /// <summary>
    /// This should never be done when the content can be identified properly, as once identification is lost, it is extremely difficult (and context dependent) to restore it again. Contained resources may have profiles and tags In their meta elements, but SHALL NOT have security labels.
    /// </summary>
    size_t _contained_count;
    Resource** _contained;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
    /// </summary>
    size_t _identifier_count;
    Identifier** _identifier;
    /// <summary>
    /// The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this FamilyMemberHistory.
    /// </summary>
    size_t _instantiatesCanonical_count;
    NullableString8** _instantiatesCanonical;
    /// <summary>
    /// This might be an HTML page, PDF, etc. or could just be a non-resolvable URI identifier.
    /// </summary>
    size_t _instantiatesUri_count;
    NullableString8** _instantiatesUri;
    /// <summary>
    /// This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
    /// </summary>
    NullableString8* _status;
    /// <summary>
    /// Describes why the family member's history is not available.
    /// </summary>
    CodeableConcept* _dataAbsentReason;
    /// <summary>
    /// The person who this history concerns.
    /// </summary>
    Reference* _patient;
    /// <summary>
    /// This should be captured even if the same as the date on the List aggregating the full family history.
    /// </summary>
    ISO8601_Time* _date;
    /// <summary>
    /// This will either be a name or a description; e.g. "Aunt Susan", "my cousin with the red hair".
    /// </summary>
    string* _name;
    /// <summary>
    /// The type of relationship this person has to the patient (father, mother, brother etc.).
    /// </summary>
    CodeableConcept* _relationship;
    /// <summary>
    /// This element should ideally reflect whether the individual is genetically male or female.  However, as reported information based on the knowledge of the patient or reporting friend/relative, there may be situations where the reported sex might not be totally accurate.  E.g. 'Aunt Sue' might be XY rather than XX.  Questions soliciting this information should be phrased to encourage capture of genetic sex where known.  However, systems performing analysis should also allow for the possibility of imprecision with this element.
    /// </summary>
    CodeableConcept* _sex;
    /// <summary>
    /// The actual or approximate date of birth of the relative.
    /// </summary>
    Period* _bornPeriod;
    /// <summary>
    /// The actual or approximate date of birth of the relative.
    /// </summary>
    ISO8601_Time* _bornDate;
    /// <summary>
    /// The actual or approximate date of birth of the relative.
    /// </summary>
    string* _bornString;
    /// <summary>
    /// use estimatedAge to indicate whether the age is actual or not.
    /// </summary>
    Age* _ageAge;
    /// <summary>
    /// use estimatedAge to indicate whether the age is actual or not.
    /// </summary>
    Range* _ageRange;
    /// <summary>
    /// use estimatedAge to indicate whether the age is actual or not.
    /// </summary>
    string* _ageString;
    /// <summary>
    /// This element is labeled as a modifier because the fact that age is estimated can/should change the results of any algorithm that calculates based on the specified age.
    /// </summary>
    NullableBoolean* _estimatedAge;
    /// <summary>
    /// Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
    /// </summary>
    NullableBoolean* _deceasedBoolean;
    /// <summary>
    /// Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
    /// </summary>
    Age* _deceasedAge;
    /// <summary>
    /// Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
    /// </summary>
    Range* _deceasedRange;
    /// <summary>
    /// Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
    /// </summary>
    ISO8601_Time* _deceasedDate;
    /// <summary>
    /// Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
    /// </summary>
    string* _deceasedString;
    /// <summary>
    /// Textual reasons can be captured using reasonCode.text.
    /// </summary>
    size_t _reasonCode_count;
    CodeableConcept** _reasonCode;
    /// <summary>
    /// Indicates a Condition, Observation, AllergyIntolerance, or QuestionnaireResponse that justifies this family member history event.
    /// </summary>
    size_t _reasonReference_count;
    Reference** _reasonReference;
    /// <summary>
    /// This property allows a non condition-specific note to the made about the related person. Ideally, the note would be in the condition property, but this is not always possible.
    /// </summary>
    size_t _note_count;
    Annotation** _note;
    /// <summary>
    /// The significant Conditions (or condition) that the family member had. This is a repeating section to allow a system to represent more than one condition per resource, though there is nothing stopping multiple resources - one per condition.
    /// </summary>
    size_t _condition_count;
    FamilyMemberHistoryCondition** _condition;
  };
};
