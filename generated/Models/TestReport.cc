// <auto-generated />
// Built from: hl7.fhir.r4.core version: 4.0.1


namespace fhir_R4
{
  /// <summary>
  /// A participant in the test execution, either the execution engine, a client, or a server.
  /// </summary>
  struct TestReportParticipant {
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// The type of participant.
    /// </summary>
    NullableString8* _type;
    /// <summary>
    /// The uri of the participant. An absolute URL is preferred.
    /// </summary>
    NullableString8* _uri;
    /// <summary>
    /// The display name of the participant.
    /// </summary>
    string* _display;
  };
  /// <summary>
  /// The operation performed.
  /// </summary>
  struct TestReportSetupActionOperation {
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// The result of this operation.
    /// </summary>
    NullableString8* _result;
    /// <summary>
    /// An explanatory message associated with the result.
    /// </summary>
    NullableString8* _message;
    /// <summary>
    /// A link to further details on the result.
    /// </summary>
    NullableString8* _detail;
  };
  /// <summary>
  /// The results of the assertion performed on the previous operations.
  /// </summary>
  struct TestReportSetupActionAssert {
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// The result of this assertion.
    /// </summary>
    NullableString8* _result;
    /// <summary>
    /// An explanatory message associated with the result.
    /// </summary>
    NullableString8* _message;
    /// <summary>
    /// A link to further details on the result.
    /// </summary>
    string* _detail;
  };
  /// <summary>
  /// An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
  /// </summary>
  struct TestReportSetupAction {
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// The operation performed.
    /// </summary>
    TestReportSetupActionOperation* _operation;
    /// <summary>
    /// The results of the assertion performed on the previous operations.
    /// </summary>
    TestReportSetupActionAssert* _assert;
  };
  /// <summary>
  /// The results of the series of required setup operations before the tests were executed.
  /// </summary>
  struct TestReportSetup {
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
    /// </summary>
    size_t _action_count;
    TestReportSetupAction** _action;
  };
  /// <summary>
  /// An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
  /// </summary>
  struct TestReportTestAction {
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// An operation would involve a REST request to a server.
    /// </summary>
    TestReportSetupActionOperation* _operation;
    /// <summary>
    /// The results of the assertion performed on the previous operations.
    /// </summary>
    TestReportSetupActionAssert* _assert;
  };
  /// <summary>
  /// A test executed from the test script.
  /// </summary>
  struct TestReportTest {
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// The name of this test used for tracking/logging purposes by test engines.
    /// </summary>
    string* _name;
    /// <summary>
    /// A short description of the test used by test engines for tracking and reporting purposes.
    /// </summary>
    string* _description;
    /// <summary>
    /// An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
    /// </summary>
    size_t _action_count;
    TestReportTestAction** _action;
  };
  /// <summary>
  /// An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
  /// </summary>
  struct TestReportTeardownAction {
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// An operation would involve a REST request to a server.
    /// </summary>
    TestReportSetupActionOperation* _operation;
  };
  /// <summary>
  /// The results of the series of operations required to clean up after all the tests were executed (successfully or otherwise).
  /// </summary>
  struct TestReportTeardown {
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
    /// </summary>
    size_t _action_count;
    TestReportTeardownAction** _action;
  };
  /// <summary>
  /// A summary of information based on the results of executing a TestScript.
  /// </summary>
  struct TestReport {
    ResourceType resourceType;
    /// <summary>
    /// The only time that a resource does not have an id is when it is being submitted to the server using a create operation.
    /// </summary>
    string _id;
    /// <summary>
    /// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
    /// </summary>
    Meta* _meta;
    /// <summary>
    /// Asserting this rule set restricts the content to be only understood by a limited set of trading partners. This inherently limits the usefulness of the data in the long term. However, the existing health eco-system is highly fractured, and not yet ready to define, collect, and exchange data in a generally computable sense. Wherever possible, implementers and/or specification writers should avoid using this element. Often, when used, the URL is a reference to an implementation guide that defines these special rules as part of it's narrative along with other profiles, value sets, etc.
    /// </summary>
    NullableString8* _implicitRules;
    /// <summary>
    /// Language is provided to support indexing and accessibility (typically, services such as text to speech use the language tag). The html language tag in the narrative applies  to the narrative. The language tag on the resource may be used to specify the language of other presentations generated from the data in the resource. Not all the content has to be in the base language. The Resource.language should not be assumed to apply to the narrative automatically. If a language is specified, it should it also be specified on the div element in the html (see rules in HTML5 for information about the relationship between xml:lang and the html lang attribute).
    /// </summary>
    NullableString8* _language;
    /// <summary>
    /// Contained resources do not have narrative. Resources that are not contained SHOULD have a narrative. In some cases, a resource may only have text with little or no additional discrete data (as long as all minOccurs=1 elements are satisfied).  This may be necessary for data from legacy systems where information is captured as a "text blob" or where text is additionally entered raw or narrated and encoded information is added later.
    /// </summary>
    Narrative* _text;
    /// <summary>
    /// This should never be done when the content can be identified properly, as once identification is lost, it is extremely difficult (and context dependent) to restore it again. Contained resources may have profiles and tags In their meta elements, but SHALL NOT have security labels.
    /// </summary>
    size_t _contained_count;
    Resource** _contained;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// Identifier for the TestScript assigned for external purposes outside the context of FHIR.
    /// </summary>
    Identifier* _identifier;
    /// <summary>
    /// Not expected to be globally unique.
    /// </summary>
    string* _name;
    /// <summary>
    /// The status represents where the execution is currently within the test script execution life cycle.
    /// This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
    /// </summary>
    NullableString8* _status;
    /// <summary>
    /// Ideally this is an absolute URL that is used to identify the version-specific TestScript that was executed, matching the `TestScript.url`.
    /// </summary>
    Reference* _testScript;
    /// <summary>
    /// The pass and fail result represents a completed test script execution. The pending result represents a test script execution that has not yet started or is currently in progress.
    /// </summary>
    NullableString8* _result;
    /// <summary>
    /// The final score (percentage of tests passed) resulting from the execution of the TestScript.
    /// </summary>
    NullableString8* _score;
    /// <summary>
    /// Usually an organization, but may be an individual. This item SHOULD be populated unless the information is available from context.
    /// </summary>
    string* _tester;
    /// <summary>
    /// Additional specific dates may be added as extensions.
    /// </summary>
    ISO8601_Time* _issued;
    /// <summary>
    /// A participant in the test execution, either the execution engine, a client, or a server.
    /// </summary>
    size_t _participant_count;
    TestReportParticipant** _participant;
    /// <summary>
    /// The results of the series of required setup operations before the tests were executed.
    /// </summary>
    TestReportSetup* _setup;
    /// <summary>
    /// A test executed from the test script.
    /// </summary>
    size_t _test_count;
    TestReportTest** _test;
    /// <summary>
    /// The results of the series of operations required to clean up after all the tests were executed (successfully or otherwise).
    /// </summary>
    TestReportTeardown* _teardown;
  };
};
