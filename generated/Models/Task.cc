// <auto-generated />
// Built from: hl7.fhir.r4.core version: 4.0.1


namespace fhir_R4
{
  /// <summary>
  /// If the Task.focus is a request resource and the task is seeking fulfillment (i.e. is asking for the request to be actioned), this element identifies any limitations on what parts of the referenced request should be actioned.
  /// </summary>
  struct TaskRestriction {
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// Indicates the number of times the requested action should occur.
    /// </summary>
    NullableInt32* _repetitions;
    /// <summary>
    /// Note that period.high is the due date representing the time by which the task should be completed.
    /// </summary>
    Period* _period;
    /// <summary>
    /// For requests that are targeted to more than on potential recipient/target, for whom is fulfillment sought?
    /// </summary>
    size_t _recipient_count;
    Reference** _recipient;
  };
  /// <summary>
  /// Additional information that may be needed in the execution of the task.
  /// </summary>
  struct TaskInput {
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// If referencing a BPMN workflow or Protocol, the "system" is the URL for the workflow definition and the code is the "name" of the required input.
    /// </summary>
    CodeableConcept* _type;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    NullableString8* _valueBase64Binary;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    NullableBoolean* _valueBoolean;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    NullableString8* _valueCanonical;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    NullableString8* _valueCode;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    ISO8601_Time* _valueDate;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    ISO8601_Time* _valueDateTime;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    NullableString8* _valueDecimal;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    NullableString8* _valueId;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    ISO8601_Time* _valueInstant;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    NullableInt32* _valueInteger;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    NullableString8* _valueMarkdown;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    NullableString8* _valueOid;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    NullableInt32* _valuePositiveInt;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    string* _valueString;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    ISO8601_Time* _valueTime;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    NullableInt32* _valueUnsignedInt;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    NullableString8* _valueUri;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    NullableString8* _valueUrl;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    NullableString8* _valueUuid;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    Address* _valueAddress;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    Age* _valueAge;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    Annotation* _valueAnnotation;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    Attachment* _valueAttachment;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    CodeableConcept* _valueCodeableConcept;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    Coding* _valueCoding;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    ContactPoint* _valueContactPoint;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    Count* _valueCount;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    Distance* _valueDistance;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    Duration* _valueDuration;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    HumanName* _valueHumanName;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    Identifier* _valueIdentifier;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    Money* _valueMoney;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    Period* _valuePeriod;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    Quantity* _valueQuantity;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    Range* _valueRange;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    Ratio* _valueRatio;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    Reference* _valueReference;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    SampledData* _valueSampledData;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    Signature* _valueSignature;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    Timing* _valueTiming;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    ContactDetail* _valueContactDetail;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    Contributor* _valueContributor;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    DataRequirement* _valueDataRequirement;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    Expression* _valueExpression;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    ParameterDefinition* _valueParameterDefinition;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    RelatedArtifact* _valueRelatedArtifact;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    TriggerDefinition* _valueTriggerDefinition;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    UsageContext* _valueUsageContext;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    Dosage* _valueDosage;
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    Meta* _valueMeta;
  };
  /// <summary>
  /// Outputs produced by the Task.
  /// </summary>
  struct TaskOutput {
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// The name of the Output parameter.
    /// </summary>
    CodeableConcept* _type;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    NullableString8* _valueBase64Binary;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    NullableBoolean* _valueBoolean;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    NullableString8* _valueCanonical;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    NullableString8* _valueCode;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    ISO8601_Time* _valueDate;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    ISO8601_Time* _valueDateTime;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    NullableString8* _valueDecimal;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    NullableString8* _valueId;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    ISO8601_Time* _valueInstant;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    NullableInt32* _valueInteger;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    NullableString8* _valueMarkdown;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    NullableString8* _valueOid;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    NullableInt32* _valuePositiveInt;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    string* _valueString;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    ISO8601_Time* _valueTime;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    NullableInt32* _valueUnsignedInt;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    NullableString8* _valueUri;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    NullableString8* _valueUrl;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    NullableString8* _valueUuid;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    Address* _valueAddress;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    Age* _valueAge;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    Annotation* _valueAnnotation;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    Attachment* _valueAttachment;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    CodeableConcept* _valueCodeableConcept;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    Coding* _valueCoding;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    ContactPoint* _valueContactPoint;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    Count* _valueCount;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    Distance* _valueDistance;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    Duration* _valueDuration;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    HumanName* _valueHumanName;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    Identifier* _valueIdentifier;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    Money* _valueMoney;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    Period* _valuePeriod;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    Quantity* _valueQuantity;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    Range* _valueRange;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    Ratio* _valueRatio;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    Reference* _valueReference;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    SampledData* _valueSampledData;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    Signature* _valueSignature;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    Timing* _valueTiming;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    ContactDetail* _valueContactDetail;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    Contributor* _valueContributor;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    DataRequirement* _valueDataRequirement;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    Expression* _valueExpression;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    ParameterDefinition* _valueParameterDefinition;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    RelatedArtifact* _valueRelatedArtifact;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    TriggerDefinition* _valueTriggerDefinition;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    UsageContext* _valueUsageContext;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    Dosage* _valueDosage;
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    Meta* _valueMeta;
  };
  /// <summary>
  /// A task to be performed.
  /// </summary>
  struct Task {
    ResourceType resourceType;
    /// <summary>
    /// The only time that a resource does not have an id is when it is being submitted to the server using a create operation.
    /// </summary>
    string _id;
    /// <summary>
    /// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
    /// </summary>
    Meta* _meta;
    /// <summary>
    /// Asserting this rule set restricts the content to be only understood by a limited set of trading partners. This inherently limits the usefulness of the data in the long term. However, the existing health eco-system is highly fractured, and not yet ready to define, collect, and exchange data in a generally computable sense. Wherever possible, implementers and/or specification writers should avoid using this element. Often, when used, the URL is a reference to an implementation guide that defines these special rules as part of it's narrative along with other profiles, value sets, etc.
    /// </summary>
    NullableString8* _implicitRules;
    /// <summary>
    /// Language is provided to support indexing and accessibility (typically, services such as text to speech use the language tag). The html language tag in the narrative applies  to the narrative. The language tag on the resource may be used to specify the language of other presentations generated from the data in the resource. Not all the content has to be in the base language. The Resource.language should not be assumed to apply to the narrative automatically. If a language is specified, it should it also be specified on the div element in the html (see rules in HTML5 for information about the relationship between xml:lang and the html lang attribute).
    /// </summary>
    NullableString8* _language;
    /// <summary>
    /// Contained resources do not have narrative. Resources that are not contained SHOULD have a narrative. In some cases, a resource may only have text with little or no additional discrete data (as long as all minOccurs=1 elements are satisfied).  This may be necessary for data from legacy systems where information is captured as a "text blob" or where text is additionally entered raw or narrated and encoded information is added later.
    /// </summary>
    Narrative* _text;
    /// <summary>
    /// This should never be done when the content can be identified properly, as once identification is lost, it is extremely difficult (and context dependent) to restore it again. Contained resources may have profiles and tags In their meta elements, but SHALL NOT have security labels.
    /// </summary>
    size_t _contained_count;
    Resource** _contained;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// The business identifier for this task.
    /// </summary>
    size_t _identifier_count;
    Identifier** _identifier;
    /// <summary>
    /// The URL pointing to a *FHIR*-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Task.
    /// </summary>
    NullableString8* _instantiatesCanonical;
    /// <summary>
    /// The URL pointing to an *externally* maintained  protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Task.
    /// </summary>
    NullableString8* _instantiatesUri;
    /// <summary>
    /// BasedOn refers to a higher-level authorization that triggered the creation of the task.  It references a "request" resource such as a ServiceRequest, MedicationRequest, ServiceRequest, CarePlan, etc. which is distinct from the "request" resource the task is seeking to fulfill.  This latter resource is referenced by FocusOn.  For example, based on a ServiceRequest (= BasedOn), a task is created to fulfill a procedureRequest ( = FocusOn ) to collect a specimen from a patient.
    /// </summary>
    size_t _basedOn_count;
    Reference** _basedOn;
    /// <summary>
    /// An identifier that links together multiple tasks and other requests that were created in the same context.
    /// </summary>
    Identifier* _groupIdentifier;
    /// <summary>
    /// This should usually be 0..1.
    /// </summary>
    size_t _partOf_count;
    Reference** _partOf;
    /// <summary>
    /// The current status of the task.
    /// </summary>
    NullableString8* _status;
    /// <summary>
    /// This applies to the current status.  Look at the history of the task to see reasons for past statuses.
    /// </summary>
    CodeableConcept* _statusReason;
    /// <summary>
    /// Contains business-specific nuances of the business state.
    /// </summary>
    CodeableConcept* _businessStatus;
    /// <summary>
    /// This element is immutable.  Proposed tasks, planned tasks, etc. must be distinct instances.
    /// In most cases, Tasks will have an intent of "order".
    /// </summary>
    NullableString8* _intent;
    /// <summary>
    /// Indicates how quickly the Task should be addressed with respect to other requests.
    /// </summary>
    NullableString8* _priority;
    /// <summary>
    /// The title (eg "My Tasks", "Outstanding Tasks for Patient X") should go into the code.
    /// </summary>
    CodeableConcept* _code;
    /// <summary>
    /// A free-text description of what is to be performed.
    /// </summary>
    string* _description;
    /// <summary>
    /// If multiple resources need to be manipulated, use sub-tasks.  (This ensures that status can be tracked independently for each referenced resource.).
    /// </summary>
    Reference* _focus;
    /// <summary>
    /// The entity who benefits from the performance of the service specified in the task (e.g., the patient).
    /// </summary>
    Reference* _for;
    /// <summary>
    /// The healthcare event  (e.g. a patient and healthcare provider interaction) during which this task was created.
    /// </summary>
    Reference* _encounter;
    /// <summary>
    /// Identifies the time action was first taken against the task (start) and/or the time final action was taken against the task prior to marking it as completed (end).
    /// </summary>
    Period* _executionPeriod;
    /// <summary>
    /// The date and time this task was created.
    /// </summary>
    ISO8601_Time* _authoredOn;
    /// <summary>
    /// The date and time of last modification to this task.
    /// </summary>
    ISO8601_Time* _lastModified;
    /// <summary>
    /// The creator of the task.
    /// </summary>
    Reference* _requester;
    /// <summary>
    /// The kind of participant that should perform the task.
    /// </summary>
    size_t _performerType_count;
    CodeableConcept** _performerType;
    /// <summary>
    /// Tasks may be created with an owner not yet identified.
    /// </summary>
    Reference* _owner;
    /// <summary>
    /// Principal physical location where the this task is performed.
    /// </summary>
    Reference* _location;
    /// <summary>
    /// This should only be included if there is no focus or if it differs from the reason indicated on the focus.
    /// </summary>
    CodeableConcept* _reasonCode;
    /// <summary>
    /// Tasks might be justified based on an Observation, a Condition, a past or planned procedure, etc.   This should only be included if there is no focus or if it differs from the reason indicated on the focus.    Use the CodeableConcept text element in `Task.reasonCode` if the data is free (uncoded) text.
    /// </summary>
    Reference* _reasonReference;
    /// <summary>
    /// Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be relevant to the Task.
    /// </summary>
    size_t _insurance_count;
    Reference** _insurance;
    /// <summary>
    /// Free-text information captured about the task as it progresses.
    /// </summary>
    size_t _note_count;
    Annotation** _note;
    /// <summary>
    /// This element does not point to the Provenance associated with the *current* version of the resource - as it would be created after this version existed.  The Provenance for the current version can be retrieved with a _revinclude.
    /// </summary>
    size_t _relevantHistory_count;
    Reference** _relevantHistory;
    /// <summary>
    /// If the Task.focus is a request resource and the task is seeking fulfillment (i.e. is asking for the request to be actioned), this element identifies any limitations on what parts of the referenced request should be actioned.
    /// </summary>
    TaskRestriction* _restriction;
    /// <summary>
    /// Additional information that may be needed in the execution of the task.
    /// </summary>
    size_t _input_count;
    TaskInput** _input;
    /// <summary>
    /// Outputs produced by the Task.
    /// </summary>
    size_t _output_count;
    TaskOutput** _output;
  };
};
