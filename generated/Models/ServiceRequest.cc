// <auto-generated />
// Built from: hl7.fhir.r4.core version: 4.0.1


namespace fhir_R4
{
  /// <summary>
  /// A record of a request for service such as diagnostic investigations, treatments, or operations to be performed.
  /// </summary>
  struct ServiceRequest {
    ResourceType resourceType;
    /// <summary>
    /// The only time that a resource does not have an id is when it is being submitted to the server using a create operation.
    /// </summary>
    string _id;
    /// <summary>
    /// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
    /// </summary>
    Meta* _meta;
    /// <summary>
    /// Asserting this rule set restricts the content to be only understood by a limited set of trading partners. This inherently limits the usefulness of the data in the long term. However, the existing health eco-system is highly fractured, and not yet ready to define, collect, and exchange data in a generally computable sense. Wherever possible, implementers and/or specification writers should avoid using this element. Often, when used, the URL is a reference to an implementation guide that defines these special rules as part of it's narrative along with other profiles, value sets, etc.
    /// </summary>
    NullableString8* _implicitRules;
    /// <summary>
    /// Language is provided to support indexing and accessibility (typically, services such as text to speech use the language tag). The html language tag in the narrative applies  to the narrative. The language tag on the resource may be used to specify the language of other presentations generated from the data in the resource. Not all the content has to be in the base language. The Resource.language should not be assumed to apply to the narrative automatically. If a language is specified, it should it also be specified on the div element in the html (see rules in HTML5 for information about the relationship between xml:lang and the html lang attribute).
    /// </summary>
    NullableString8* _language;
    /// <summary>
    /// Contained resources do not have narrative. Resources that are not contained SHOULD have a narrative. In some cases, a resource may only have text with little or no additional discrete data (as long as all minOccurs=1 elements are satisfied).  This may be necessary for data from legacy systems where information is captured as a "text blob" or where text is additionally entered raw or narrated and encoded information is added later.
    /// </summary>
    Narrative* _text;
    /// <summary>
    /// This should never be done when the content can be identified properly, as once identification is lost, it is extremely difficult (and context dependent) to restore it again. Contained resources may have profiles and tags In their meta elements, but SHALL NOT have security labels.
    /// </summary>
    size_t _contained_count;
    Resource** _contained;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _extension_count;
    Extension** _extension;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    size_t _modifierExtension_count;
    Extension** _modifierExtension;
    /// <summary>
    /// The identifier.type element is used to distinguish between the identifiers assigned by the orderer (known as the 'Placer' in HL7 v2) and the producer of the observations in response to the order (known as the 'Filler' in HL7 v2).  For further discussion and examples see the resource notes section below.
    /// </summary>
    size_t _identifier_count;
    Identifier** _identifier;
    /// <summary>
    /// Note: This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
    /// </summary>
    size_t _instantiatesCanonical_count;
    NullableString8** _instantiatesCanonical;
    /// <summary>
    /// This might be an HTML page, PDF, etc. or could just be a non-resolvable URI identifier.
    /// </summary>
    size_t _instantiatesUri_count;
    NullableString8** _instantiatesUri;
    /// <summary>
    /// Plan/proposal/order fulfilled by this request.
    /// </summary>
    size_t _basedOn_count;
    Reference** _basedOn;
    /// <summary>
    /// The request takes the place of the referenced completed or terminated request(s).
    /// </summary>
    size_t _replaces_count;
    Reference** _replaces;
    /// <summary>
    /// Requests are linked either by a "basedOn" relationship (i.e. one request is fulfilling another) or by having a common requisition. Requests that are part of the same requisition are generally treated independently from the perspective of changing their state or maintaining them after initial creation.
    /// </summary>
    Identifier* _requisition;
    /// <summary>
    /// The status is generally fully in the control of the requester - they determine whether the order is draft or active and, after it has been activated, competed, cancelled or suspended. States relating to the activities of the performer are reflected on either the corresponding event (see [Event Pattern](event.html) for general discussion) or using the [Task](task.html) resource.
    /// </summary>
    NullableString8* _status;
    /// <summary>
    /// This element is labeled as a modifier because the intent alters when and how the resource is actually applicable.
    /// </summary>
    NullableString8* _intent;
    /// <summary>
    /// There may be multiple axis of categorization depending on the context or use case for retrieving or displaying the resource.  The level of granularity is defined by the category concepts in the value set.
    /// </summary>
    size_t _category_count;
    CodeableConcept** _category;
    /// <summary>
    /// Indicates how quickly the ServiceRequest should be addressed with respect to other requests.
    /// </summary>
    NullableString8* _priority;
    /// <summary>
    /// In general, only the code and timeframe will be present, though occasional additional qualifiers such as body site or even performer could be included to narrow the scope of the prohibition.  If the ServiceRequest.code and ServiceRequest.doNotPerform both contain negation, that will reinforce prohibition and should not have a double negative interpretation.
    /// </summary>
    NullableBoolean* _doNotPerform;
    /// <summary>
    /// Many laboratory and radiology procedure codes embed the specimen/organ system in the test order name, for example,  serum or serum/plasma glucose, or a chest x-ray. The specimen might not be recorded separately from the test code.
    /// </summary>
    CodeableConcept* _code;
    /// <summary>
    /// For information from the medical record intended to support the delivery of the requested services, use the `supportingInformation` element.
    /// </summary>
    size_t _orderDetail_count;
    CodeableConcept** _orderDetail;
    /// <summary>
    /// An amount of service being requested which can be a quantity ( for example $1,500 home modification), a ratio ( for example, 20 half day visits per month), or a range (2.0 to 1.8 Gy per fraction).
    /// </summary>
    Quantity* _quantityQuantity;
    /// <summary>
    /// An amount of service being requested which can be a quantity ( for example $1,500 home modification), a ratio ( for example, 20 half day visits per month), or a range (2.0 to 1.8 Gy per fraction).
    /// </summary>
    Ratio* _quantityRatio;
    /// <summary>
    /// An amount of service being requested which can be a quantity ( for example $1,500 home modification), a ratio ( for example, 20 half day visits per month), or a range (2.0 to 1.8 Gy per fraction).
    /// </summary>
    Range* _quantityRange;
    /// <summary>
    /// On whom or what the service is to be performed. This is usually a human patient, but can also be requested on animals, groups of humans or animals, devices such as dialysis machines, or even locations (typically for environmental scans).
    /// </summary>
    Reference* _subject;
    /// <summary>
    /// An encounter that provides additional information about the healthcare context in which this request is made.
    /// </summary>
    Reference* _encounter;
    /// <summary>
    /// The date/time at which the requested service should occur.
    /// </summary>
    ISO8601_Time* _occurrenceDateTime;
    /// <summary>
    /// The date/time at which the requested service should occur.
    /// </summary>
    Period* _occurrencePeriod;
    /// <summary>
    /// The date/time at which the requested service should occur.
    /// </summary>
    Timing* _occurrenceTiming;
    /// <summary>
    /// If a CodeableConcept is present, it indicates the pre-condition for performing the service.  For example "pain", "on flare-up", etc.
    /// </summary>
    NullableBoolean* _asNeededBoolean;
    /// <summary>
    /// If a CodeableConcept is present, it indicates the pre-condition for performing the service.  For example "pain", "on flare-up", etc.
    /// </summary>
    CodeableConcept* _asNeededCodeableConcept;
    /// <summary>
    /// When the request transitioned to being actionable.
    /// </summary>
    ISO8601_Time* _authoredOn;
    /// <summary>
    /// This not the dispatcher, but rather who is the authorizer.  This element is not intended to handle delegation which would generally be managed through the Provenance resource.
    /// </summary>
    Reference* _requester;
    /// <summary>
    /// This is a  role, not  a participation type.  In other words, does not describe the task but describes the capacity.  For example, “compounding pharmacy”, “psychiatrist” or “internal referral”.
    /// </summary>
    CodeableConcept* _performerType;
    /// <summary>
    /// If multiple performers are present, it is interpreted as a list of *alternative* performers without any preference regardless of order.  If order of preference is needed use the [request-performerOrder extension](extension-request-performerorder.html).  Use CareTeam to represent a group of performers (for example, Practitioner A *and* Practitioner B).
    /// </summary>
    size_t _performer_count;
    Reference** _performer;
    /// <summary>
    /// The preferred location(s) where the procedure should actually happen in coded or free text form. E.g. at home or nursing day care center.
    /// </summary>
    size_t _locationCode_count;
    CodeableConcept** _locationCode;
    /// <summary>
    /// A reference to the the preferred location(s) where the procedure should actually happen. E.g. at home or nursing day care center.
    /// </summary>
    size_t _locationReference_count;
    Reference** _locationReference;
    /// <summary>
    /// This element represents why the referral is being made and may be used to decide how the service will be performed, or even if it will be performed at all.   Use `CodeableConcept.text` element if the data is free (uncoded) text as shown in the [CT Scan example](servicerequest-example-di.html).
    /// </summary>
    size_t _reasonCode_count;
    CodeableConcept** _reasonCode;
    /// <summary>
    /// This element represents why the referral is being made and may be used to decide how the service will be performed, or even if it will be performed at all.    To be as specific as possible,  a reference to  *Observation* or *Condition* should be used if available.  Otherwise when referencing  *DiagnosticReport*  it should contain a finding  in `DiagnosticReport.conclusion` and/or `DiagnosticReport.conclusionCode`.   When using a reference to *DocumentReference*, the target document should contain clear findings language providing the relevant reason for this service request.  Use  the CodeableConcept text element in `ServiceRequest.reasonCode` if the data is free (uncoded) text as shown in the [CT Scan example](servicerequest-example-di.html).
    /// </summary>
    size_t _reasonReference_count;
    Reference** _reasonReference;
    /// <summary>
    /// Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be needed for delivering the requested service.
    /// </summary>
    size_t _insurance_count;
    Reference** _insurance;
    /// <summary>
    /// To represent information about how the services are to be delivered use the `instructions` element.
    /// </summary>
    size_t _supportingInfo_count;
    Reference** _supportingInfo;
    /// <summary>
    /// Many diagnostic procedures need a specimen, but the request itself is not actually about the specimen. This element is for when the diagnostic is requested on already existing specimens and the request points to the specimen it applies to.    Conversely, if the request is entered first with an unknown specimen, then the [Specimen](specimen.html) resource points to the ServiceRequest.
    /// </summary>
    size_t _specimen_count;
    Reference** _specimen;
    /// <summary>
    /// Only used if not implicit in the code found in ServiceRequest.code.  If the use case requires BodySite to be handled as a separate resource instead of an inline coded element (e.g. to identify and track separately)  then use the standard extension [procedure-targetBodyStructure](extension-procedure-targetbodystructure.html).
    /// </summary>
    size_t _bodySite_count;
    CodeableConcept** _bodySite;
    /// <summary>
    /// Any other notes and comments made about the service request. For example, internal billing notes.
    /// </summary>
    size_t _note_count;
    Annotation** _note;
    /// <summary>
    /// Instructions in terms that are understood by the patient or consumer.
    /// </summary>
    string* _patientInstruction;
    /// <summary>
    /// This might not include provenances for all versions of the request – only those deemed “relevant” or important.
    /// This SHALL NOT include the Provenance associated with this current version of the resource.  (If that provenance is deemed to be a “relevant” change, it will need to be added as part of a later update.  Until then, it can be queried directly as the Provenance that points to this version using _revinclude
    /// All Provenances should have some historical version of this Request as their subject.
    /// </summary>
    size_t _relevantHistory_count;
    Reference** _relevantHistory;
  };
};
