// <auto-generated />
// Built from: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Xml;
using fhir_R4.Serialization;

namespace fhir_R4.Models
{
  /// <summary>
  /// If there is no discriminator, the content is hard to process, so this should be avoided.
  /// </summary>
  struct ElementDefinitionSlicingDiscriminator : Element { 
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    Extension* _extension;
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    Extension* _extension;
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// The only FHIRPath functions that are allowed are as(type), resolve(), and extension(url).
    /// </summary>
    string _path;
    /// <summary>
    /// How the element value is interpreted when discrimination is evaluated.
    /// </summary>
    NullableString8 _type;
  }
  /// <summary>
  /// The first element in the sequence, the one that carries the slicing, is the definition that applies to all the slices. This is based on the unconstrained element, but can apply any constraints as appropriate. This may include the common constraints on the children of the element.
  /// </summary>
  struct ElementDefinitionSlicing : Element { 
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    Extension* _extension;
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// If it's really not possible to differentiate them, the design should be re-evaluated to make the content usable.
    /// </summary>
    string _description;
    /// <summary>
    /// If there is no discriminator, the content is hard to process, so this should be avoided.
    /// </summary>
    elementDefinitionSlicingDiscriminator* _discriminator;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    Extension* _extension;
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// Order should only be required when it is a pressing concern for presentation. Profile authors should consider making the order a feature of the rules about the narrative, not the rules about the data - requiring ordered data makes the profile much less re-usable.
    /// </summary>
    NullableBoolean _ordered;
    /// <summary>
    /// Allowing additional elements makes for a much for flexible template - it's open for use in wider contexts, but also means that the content of the resource is not closed, and applications have to decide how to handle content not described by the profile.
    /// </summary>
    NullableString8 _rules;
  }
  /// <summary>
  /// The base information does not carry any information that could not be determined from the path and related profiles, but making this determination requires both that the related profiles are available, and that the algorithm to determine them be available. For tooling simplicity, the base information must always be populated in element definitions in snap shots, even if it is the same.
  /// </summary>
  struct ElementDefinitionBase : Element { 
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    Extension* _extension;
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    Extension* _extension;
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// This is provided to code generation, since the serialization representation in JSON differs depending on whether the base element has max &gt; 1. Also, some forms of code generation may differ.
    /// </summary>
    string _max;
    /// <summary>
    /// This is provided for consistency with max, and may affect code generation of mandatory elements of the base resource are generated differently (some reference implementations have done this).
    /// </summary>
    NullableInt32 _min;
    /// <summary>
    /// The Path that identifies the base element - this matches the ElementDefinition.path for that element. Across FHIR, there is only one base definition of any element - that is, an element definition on a [StructureDefinition](structuredefinition.html#) without a StructureDefinition.base.
    /// </summary>
    string _path;
  }
  /// <summary>
  /// The Type of the element can be left blank in a differential constraint, in which case the type is inherited from the resource. Abstract types are not permitted to appear as a type when multiple types are listed.  (I.e. Abstract types cannot be part of a choice).
  /// </summary>
  struct ElementDefinitionType : Element { 
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    Extension* _extension;
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// See [Aggregation Rules](elementdefinition.html#aggregation) for further clarification.
    /// </summary>
    NullableString8* _aggregation;
    /// <summary>
    /// If the element is a reference to another resource, this element contains "Reference", and the targetProfile element defines what resources can be referenced. The targetProfile may be a reference to the general definition of a resource (e.g. http://hl7.org/fhir/StructureDefinition/Patient).
    /// </summary>
    NullableString8 _code;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    Extension* _extension;
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// It is possible to profile  backbone element (e.g. part of a resource), using the [profile-element](extension-elementdefinition-profile-element.html) extension.
    /// </summary>
    NullableString8* _profile;
    /// <summary>
    /// Used when the type is "Reference" or "canonical", and identifies a profile structure or implementation Guide that applies to the target of the reference this element refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the target resource SHALL conform to at least one profile defined in the implementation guide.
    /// </summary>
    NullableString8* _targetProfile;
    /// <summary>
    /// The base specification never makes a rule as to which form is allowed, but implementation guides may do this. See [Aggregation Rules](elementdefinition.html#aggregation) for further clarification.
    /// </summary>
    NullableString8 _versioning;
  }
  /// <summary>
  /// Examples will most commonly be present for data where it's not implicitly obvious from either the data type or value set what the values might be.  (I.e. Example values for dates or quantities would generally be unnecessary.)  If the example value is fully populated, the publication tool can generate an instance automatically.
  /// </summary>
  struct ElementDefinitionExample : Element { 
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    Extension* _extension;
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    Extension* _extension;
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// Describes the purpose of this example amoung the set of examples.
    /// </summary>
    string _label;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    NullableString8 _valuebase64Binary;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    NullableBoolean _valueboolean;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    NullableString8 _valuecanonical;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    NullableString8 _valuecode;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    ISO8601_Time _valuedate;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    ISO8601_Time _valuedateTime;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    NullableString8 _valuedecimal;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    NullableString8 _valueid;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    ISO8601_Time _valueinstant;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    NullableInt32 _valueinteger;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    NullableString8 _valuemarkdown;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    NullableString8 _valueoid;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    NullableInt32 _valuepositiveInt;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    string _valuestring;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    ISO8601_Time _valuetime;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    NullableInt32 _valueunsignedInt;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    NullableString8 _valueuri;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    NullableString8 _valueurl;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    NullableString8 _valueuuid;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    Address _valueaddress;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    Age _valueage;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    Annotation _valueannotation;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    Attachment _valueattachment;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    CodeableConcept _valuecodeableConcept;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    Coding _valuecoding;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    ContactPoint _valuecontactPoint;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    Count _valuecount;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    Distance _valuedistance;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    Duration _valueduration;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    HumanName _valuehumanName;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    Identifier _valueidentifier;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    Money _valuemoney;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    Period _valueperiod;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    Quantity _valuequantity;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    Range _valuerange;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    Ratio _valueratio;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    Reference _valuereference;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    SampledData _valuesampledData;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    Signature _valuesignature;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    Timing _valuetiming;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    ContactDetail _valuecontactDetail;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    Contributor _valuecontributor;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    DataRequirement _valuedataRequirement;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    Expression _valueexpression;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    ParameterDefinition _valueparameterDefinition;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    RelatedArtifact _valuerelatedArtifact;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    TriggerDefinition _valuetriggerDefinition;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    UsageContext _valueusageContext;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    Dosage _valuedosage;
    /// <summary>
    /// The actual value for the element, which must be one of the types allowed for this element.
    /// </summary>
    Meta _valuemeta;
  }
  /// <summary>
  /// Constraints should be declared on the "context" element - the lowest element in the hierarchy that is common to all nodes referenced by the constraint.
  /// </summary>
  struct ElementDefinitionConstraint : Element { 
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    Extension* _extension;
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// In the absense of an expression, the expression is likely not enforceable by validators, and might be missed by many systems.
    /// </summary>
    string _expression;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    Extension* _extension;
    /// <summary>
    /// Should be expressed in business terms as much as possible.
    /// </summary>
    string _human;
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// Allows identification of which elements have their cardinalities impacted by the constraint.  Will not be referenced for constraints that do not affect cardinality.
    /// </summary>
    NullableString8 _key;
    /// <summary>
    /// To be used if the reason for the constraint might not be intuitive to all implementers.
    /// </summary>
    string _requirements;
    /// <summary>
    /// This allows constraints to be asserted as "shall" (error) and "should" (warning).
    /// </summary>
    NullableString8 _severity;
    /// <summary>
    /// This is used when, e.g. rendering, where it is not useful to present inherited constraints when rendering the snapshot.
    /// </summary>
    NullableString8 _source;
    /// <summary>
    /// Elements SHALL use "f" as the namespace prefix for the FHIR namespace, and "x" for the xhtml namespace, and SHALL NOT use any other prefixes.     Note: XPath is generally considered not useful because it does not apply to JSON and other formats and because of XSLT implementation issues, and may be removed in the future.
    /// </summary>
    string _xpath;
  }
  /// <summary>
  /// For a CodeableConcept, when no codes are allowed - only text, use a binding of strength "required" with a description explaining that no coded values are allowed and what sort of information to put in the "text" element.
  /// </summary>
  struct ElementDefinitionBinding : Element { 
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    Extension* _extension;
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// Describes the intended use of this particular set of codes.
    /// </summary>
    string _description;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    Extension* _extension;
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// For further discussion, see [Using Terminologies](terminologies.html).
    /// </summary>
    NullableString8 _strength;
    /// <summary>
    /// The reference may be version-specific or not (e.g. have a |[version] at the end of the canonical URL).
    /// </summary>
    NullableString8 _valueSet;
  }
  /// <summary>
  /// Mappings are not necessarily specific enough for safe translation.
  /// </summary>
  struct ElementDefinitionMapping : Element { 
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    Extension* _extension;
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// Comments that provide information about the mapping or its use.
    /// </summary>
    string _comment;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    Extension* _extension;
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// An internal reference to the definition of a mapping.
    /// </summary>
    NullableString8 _identity;
    /// <summary>
    /// If omitted, then there can be no expectation of computational interpretation of the mapping.
    /// </summary>
    NullableString8 _language;
    /// <summary>
    /// For most mappings, the syntax is undefined.  Syntax will be provided for mappings to the RIM.  Multiple mappings may be possible and may include constraints on other resource elements that identify when a particular mapping applies.
    /// </summary>
    string _map;
  }
  /// <summary>
  /// Captures constraints on each element within the resource, profile, or extension.
  /// </summary>
  struct ElementDefinition : BackboneElement { 
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    Extension* _extension;
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    Extension* _modifierExtension;
    /// <summary>
    /// Identifies additional names by which this element might also be known.
    /// </summary>
    string* _alias;
    /// <summary>
    /// The base information does not carry any information that could not be determined from the path and related profiles, but making this determination requires both that the related profiles are available, and that the algorithm to determine them be available. For tooling simplicity, the base information must always be populated in element definitions in snap shots, even if it is the same.
    /// </summary>
    elementDefinitionBase _base;
    /// <summary>
    /// For a CodeableConcept, when no codes are allowed - only text, use a binding of strength "required" with a description explaining that no coded values are allowed and what sort of information to put in the "text" element.
    /// </summary>
    elementDefinitionBinding _binding;
    /// <summary>
    /// The concept SHALL be properly aligned with the data element definition and other constraints, as defined in the code system, including relationships, of any code listed here.  Where multiple codes exist in a terminology that could correspond to the data element, the most granular code(s) should be selected, so long as they are not more restrictive than the data element itself. The mappings may be used to provide more or less granular or structured equivalences in the code system.
    /// </summary>
    Coding* _code;
    /// <summary>
    /// If it is possible to capture usage rules using constraints, that mechanism should be used in preference to this element.
    /// </summary>
    NullableString8 _comment;
    /// <summary>
    /// A reference to an invariant that may make additional statements about the cardinality or value in the instance.
    /// </summary>
    NullableString8* _condition;
    /// <summary>
    /// Constraints should be declared on the "context" element - the lowest element in the hierarchy that is common to all nodes referenced by the constraint.
    /// </summary>
    elementDefinitionConstraint* _constraint;
    /// <summary>
    /// ContentReferences can only be defined in specializations, not constrained types, and they cannot be changed and always reference the non-constrained definition.
    /// </summary>
    NullableString8 _contentReference;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    NullableString8 _defaultValuebase64Binary;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    NullableBoolean _defaultValueboolean;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    NullableString8 _defaultValuecanonical;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    NullableString8 _defaultValuecode;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    ISO8601_Time _defaultValuedate;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    ISO8601_Time _defaultValuedateTime;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    NullableString8 _defaultValuedecimal;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    NullableString8 _defaultValueid;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    ISO8601_Time _defaultValueinstant;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    NullableInt32 _defaultValueinteger;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    NullableString8 _defaultValuemarkdown;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    NullableString8 _defaultValueoid;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    NullableInt32 _defaultValuepositiveInt;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    string _defaultValuestring;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    ISO8601_Time _defaultValuetime;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    NullableInt32 _defaultValueunsignedInt;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    NullableString8 _defaultValueuri;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    NullableString8 _defaultValueurl;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    NullableString8 _defaultValueuuid;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    Address _defaultValueaddress;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    Age _defaultValueage;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    Annotation _defaultValueannotation;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    Attachment _defaultValueattachment;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    CodeableConcept _defaultValuecodeableConcept;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    Coding _defaultValuecoding;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    ContactPoint _defaultValuecontactPoint;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    Count _defaultValuecount;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    Distance _defaultValuedistance;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    Duration _defaultValueduration;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    HumanName _defaultValuehumanName;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    Identifier _defaultValueidentifier;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    Money _defaultValuemoney;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    Period _defaultValueperiod;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    Quantity _defaultValuequantity;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    Range _defaultValuerange;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    Ratio _defaultValueratio;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    Reference _defaultValuereference;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    SampledData _defaultValuesampledData;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    Signature _defaultValuesignature;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    Timing _defaultValuetiming;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    ContactDetail _defaultValuecontactDetail;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    Contributor _defaultValuecontributor;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    DataRequirement _defaultValuedataRequirement;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    Expression _defaultValueexpression;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    ParameterDefinition _defaultValueparameterDefinition;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    RelatedArtifact _defaultValuerelatedArtifact;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    TriggerDefinition _defaultValuetriggerDefinition;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    UsageContext _defaultValueusageContext;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    Dosage _defaultValuedosage;
    /// <summary>
    /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
    /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
    /// </summary>
    Meta _defaultValuemeta;
    /// <summary>
    /// It is easy for a different definition to change the meaning of an element and this can have nasty downstream consequences. Please be careful when providing definitions in a profile.
    /// </summary>
    NullableString8 _definition;
    /// <summary>
    /// Examples will most commonly be present for data where it's not implicitly obvious from either the data type or value set what the values might be.  (I.e. Example values for dates or quantities would generally be unnecessary.)  If the example value is fully populated, the publication tool can generate an instance automatically.
    /// </summary>
    elementDefinitionExample* _example;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    Extension* _extension;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    NullableString8 _fixedbase64Binary;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    NullableBoolean _fixedboolean;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    NullableString8 _fixedcanonical;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    NullableString8 _fixedcode;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    ISO8601_Time _fixeddate;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    ISO8601_Time _fixeddateTime;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    NullableString8 _fixeddecimal;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    NullableString8 _fixedid;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    ISO8601_Time _fixedinstant;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    NullableInt32 _fixedinteger;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    NullableString8 _fixedmarkdown;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    NullableString8 _fixedoid;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    NullableInt32 _fixedpositiveInt;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    string _fixedstring;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    ISO8601_Time _fixedtime;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    NullableInt32 _fixedunsignedInt;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    NullableString8 _fixeduri;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    NullableString8 _fixedurl;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    NullableString8 _fixeduuid;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    Address _fixedaddress;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    Age _fixedage;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    Annotation _fixedannotation;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    Attachment _fixedattachment;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    CodeableConcept _fixedcodeableConcept;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    Coding _fixedcoding;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    ContactPoint _fixedcontactPoint;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    Count _fixedcount;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    Distance _fixeddistance;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    Duration _fixedduration;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    HumanName _fixedhumanName;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    Identifier _fixedidentifier;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    Money _fixedmoney;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    Period _fixedperiod;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    Quantity _fixedquantity;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    Range _fixedrange;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    Ratio _fixedratio;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    Reference _fixedreference;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    SampledData _fixedsampledData;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    Signature _fixedsignature;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    Timing _fixedtiming;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    ContactDetail _fixedcontactDetail;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    Contributor _fixedcontributor;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    DataRequirement _fixeddataRequirement;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    Expression _fixedexpression;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    ParameterDefinition _fixedparameterDefinition;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    RelatedArtifact _fixedrelatedArtifact;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    TriggerDefinition _fixedtriggerDefinition;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    UsageContext _fixedusageContext;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    Dosage _fixeddosage;
    /// <summary>
    /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
    /// </summary>
    Meta _fixedmeta;
    /// <summary>
    /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    /// </summary>
    string _id;
    /// <summary>
    /// Only the definition of an element can set IsModifier true - either the specification itself or where an extension is originally defined. Once set, it cannot be changed in derived profiles. An element/extension that has isModifier=true SHOULD also have a minimum cardinality of 1, so that there is no lack of clarity about what to do if it is missing. If it can be missing, the definition SHALL make the meaning of a missing element clear.
    /// </summary>
    NullableBoolean _isModifier;
    /// <summary>
    /// Explains how that element affects the interpretation of the resource or element that contains it.
    /// </summary>
    string _isModifierReason;
    /// <summary>
    /// Some resources include a set of simple metadata, and some very large data. This element is used to reduce the quantity of data returned in searches. Note that servers may pre-cache summarized resources for optimal performance, so servers might not support per-profile use of the isSummary flag. When a request is made with _summary=true, serailisers only include elements marked as 'isSummary = true'. Other than Attachment.data, all data type properties are included in the summary form. In resource and data type definitions, if an element is at the root or has a parent that is 'mustSupport' and the minimum cardinality is 1 or the element is a modifier, it must be marked as isSummary=true.
    /// </summary>
    NullableBoolean _isSummary;
    /// <summary>
    /// See also the extension (http://hl7.org/fhir/StructureDefinition/elementdefinition-question)[extension-elementdefinition-question.html].
    /// </summary>
    string _label;
    /// <summary>
    /// Mappings are not necessarily specific enough for safe translation.
    /// </summary>
    elementDefinitionMapping* _mapping;
    /// <summary>
    /// The maximum number of times this element is permitted to appear in the instance.
    /// </summary>
    string _max;
    /// <summary>
    /// Receivers are not required to reject instances that exceed the maximum length.  The full length could be stored.  In some cases, data might be truncated, though truncation should be undertaken with care and an understanding of the consequences of doing so. If not specified, there is no conformance expectation for length support.
    /// </summary>
    NullableInt32 _maxLength;
    /// <summary>
    /// Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
    /// </summary>
    ISO8601_Time _maxValuedate;
    /// <summary>
    /// Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
    /// </summary>
    ISO8601_Time _maxValuedateTime;
    /// <summary>
    /// Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
    /// </summary>
    ISO8601_Time _maxValueinstant;
    /// <summary>
    /// Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
    /// </summary>
    ISO8601_Time _maxValuetime;
    /// <summary>
    /// Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
    /// </summary>
    NullableString8 _maxValuedecimal;
    /// <summary>
    /// Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
    /// </summary>
    NullableInt32 _maxValueinteger;
    /// <summary>
    /// Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
    /// </summary>
    NullableInt32 _maxValuepositiveInt;
    /// <summary>
    /// Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
    /// </summary>
    NullableInt32 _maxValueunsignedInt;
    /// <summary>
    /// Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
    /// </summary>
    Quantity _maxValuequantity;
    /// <summary>
    /// Implicit meanings for missing values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. An implicit meaning for a missing value can never be changed, and specifying one has the consequence that constraining its use in profiles eliminates use cases as possibilities, not merely moving them out of scope.
    /// </summary>
    NullableString8 _meaningWhenMissing;
    /// <summary>
    /// The minimum number of times this element SHALL appear in the instance.
    /// </summary>
    NullableInt32 _min;
    /// <summary>
    /// Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
    /// </summary>
    ISO8601_Time _minValuedate;
    /// <summary>
    /// Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
    /// </summary>
    ISO8601_Time _minValuedateTime;
    /// <summary>
    /// Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
    /// </summary>
    ISO8601_Time _minValueinstant;
    /// <summary>
    /// Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
    /// </summary>
    ISO8601_Time _minValuetime;
    /// <summary>
    /// Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
    /// </summary>
    NullableString8 _minValuedecimal;
    /// <summary>
    /// Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
    /// </summary>
    NullableInt32 _minValueinteger;
    /// <summary>
    /// Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
    /// </summary>
    NullableInt32 _minValuepositiveInt;
    /// <summary>
    /// Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
    /// </summary>
    NullableInt32 _minValueunsignedInt;
    /// <summary>
    /// Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
    /// </summary>
    Quantity _minValuequantity;
    /// <summary>
    /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
    /// </summary>
    Extension* _modifierExtension;
    /// <summary>
    /// "Something useful" is context dependent and impossible to describe in the base FHIR specification. For this reason, tue mustSupport flag is never set to true by the FHIR specification itself - it is only set to true in profiles.  A profile on a type can always make musSupport = true if it is false in the base type but cannot make mustSupport = false if it is true in the base type.   This is done in [Resource Profiles](profiling.html#mustsupport), where the profile labels an element as mustSupport=true. When a profile does this, it SHALL also make clear exactly what kind of "support" is required, as this can mean many things.    Note that an element that has the property IsModifier is not necessarily a "key" element (e.g. one of the important elements to make use of the resource), nor is it automatically mustSupport - however both of these things are more likely to be true for IsModifier elements than for other elements.
    /// </summary>
    NullableBoolean _mustSupport;
    /// <summary>
    /// This element can only be asserted on repeating elements and can only be introduced when defining resources or data types.  It can be further refined profiled elements but if absent in the base type, a profile cannot assert meaning.
    /// </summary>
    string _orderMeaning;
    /// <summary>
    /// The path identifies the element and is expressed as a "."-separated list of ancestor elements, beginning with the name of the resource or extension.
    /// </summary>
    string _path;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    NullableString8 _patternbase64Binary;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    NullableBoolean _patternboolean;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    NullableString8 _patterncanonical;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    NullableString8 _patterncode;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    ISO8601_Time _patterndate;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    ISO8601_Time _patterndateTime;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    NullableString8 _patterndecimal;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    NullableString8 _patternid;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    ISO8601_Time _patterninstant;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    NullableInt32 _patterninteger;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    NullableString8 _patternmarkdown;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    NullableString8 _patternoid;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    NullableInt32 _patternpositiveInt;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    string _patternstring;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    ISO8601_Time _patterntime;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    NullableInt32 _patternunsignedInt;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    NullableString8 _patternuri;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    NullableString8 _patternurl;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    NullableString8 _patternuuid;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    Address _patternaddress;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    Age _patternage;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    Annotation _patternannotation;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    Attachment _patternattachment;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    CodeableConcept _patterncodeableConcept;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    Coding _patterncoding;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    ContactPoint _patterncontactPoint;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    Count _patterncount;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    Distance _patterndistance;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    Duration _patternduration;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    HumanName _patternhumanName;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    Identifier _patternidentifier;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    Money _patternmoney;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    Period _patternperiod;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    Quantity _patternquantity;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    Range _patternrange;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    Ratio _patternratio;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    Reference _patternreference;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    SampledData _patternsampledData;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    Signature _patternsignature;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    Timing _patterntiming;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    ContactDetail _patterncontactDetail;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    Contributor _patterncontributor;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    DataRequirement _patterndataRequirement;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    Expression _patternexpression;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    ParameterDefinition _patternparameterDefinition;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    RelatedArtifact _patternrelatedArtifact;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    TriggerDefinition _patterntriggerDefinition;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    UsageContext _patternusageContext;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    Dosage _patterndosage;
    /// <summary>
    /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
    /// </summary>
    Meta _patternmeta;
    /// <summary>
    /// In resources, this is rarely used except for special cases where the representation deviates from the normal, and can only be done in the base standard (and profiles must reproduce what the base standard does). This element is used quite commonly in Logical models when the logical models represent a specific serialization format (e.g. CDA, v2 etc.).
    /// </summary>
    NullableString8* _representation;
    /// <summary>
    /// This element does not describe the usage of the element (that's done in comments), rather it's for traceability of *why* the element is either needed or why the constraints exist as they do.  This may be used to point to source materials or specifications that drove the structure of this data element.
    /// </summary>
    NullableString8 _requirements;
    /// <summary>
    /// It is easy for a different short definition to change the meaning of an element and this can have nasty downstream consequences. Please be careful when providing short definitions in a profile.
    /// </summary>
    string _short;
    /// <summary>
    /// If set to true, an ancestor profile SHALL have a slicing definition with this name.  If set to false, no ancestor profile is permitted to have a slicing definition with this name.
    /// </summary>
    NullableBoolean _sliceIsConstraining;
    /// <summary>
    /// The name SHALL be unique within the structure within the context of the constrained resource element.  (Though to avoid confusion, uniqueness across all elements is recommended.).
    /// </summary>
    string _sliceName;
    /// <summary>
    /// The first element in the sequence, the one that carries the slicing, is the definition that applies to all the slices. This is based on the unconstrained element, but can apply any constraints as appropriate. This may include the common constraints on the children of the element.
    /// </summary>
    elementDefinitionSlicing _slicing;
    /// <summary>
    /// The Type of the element can be left blank in a differential constraint, in which case the type is inherited from the resource. Abstract types are not permitted to appear as a type when multiple types are listed.  (I.e. Abstract types cannot be part of a choice).
    /// </summary>
    elementDefinitionType* _type;
  }
}
